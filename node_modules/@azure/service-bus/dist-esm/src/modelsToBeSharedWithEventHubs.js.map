{"version":3,"file":"modelsToBeSharedWithEventHubs.js","sourceRoot":"","sources":["../../src/modelsToBeSharedWithEventHubs.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,oEAAoE;AAEpE,OAAO,EAAE,aAAa,EAA2B,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAEtF,OAAO,EAAE,SAAS,EAA2B,MAAM,qBAAqB,CAAC;AASzE;;;GAGG;AACH,MAAM,UAAU,aAAa,CAC3B,OAAiC;;IAEjC,aAAO,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,0CAAE,MAAM,CAAC;AACtC,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,cAAc,CAC5B,UAAsC,EACtC,qBAAoC,EAAE,EACtC,UAAmB,EACnB,IAAa;IAEb,MAAM,KAAK,GAAW,kBAAkB,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;QACvD,OAAO;YACL,OAAO;SACR,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,uBAAuB,EAAE;QACrD,IAAI,EAAE,QAAQ,CAAC,MAAM;QACrB,MAAM,EAAE,UAAU;QAClB,KAAK;KACN,CAAC,CAAC;IAEH,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,sBAAsB,CAAC,CAAC;IAC1D,IAAI,CAAC,YAAY,CAAC,yBAAyB,EAAE,UAAU,CAAC,CAAC;IACzD,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IAExC,OAAO,IAAI,CAAC;AACd,CAAC;AAWD;;;;;;GAMG;AACH,MAAM,UAAgB,KAAK,CAAI,EAAoB,EAAE,IAAU;;QAC7D,IAAI;YACF,MAAM,GAAG,GAAG,MAAM,EAAE,EAAE,CAAC;YACvB,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;YAC3C,OAAO,GAAG,CAAC;SACZ;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,SAAS,CAAC;gBACb,IAAI,EAAE,aAAa,CAAC,OAAO;gBAC3B,OAAO,EAAE,GAAG,CAAC,OAAO;aACrB,CAAC,CAAC;YACH,MAAM,GAAG,CAAC;SACX;gBAAS;YACR,IAAI,CAAC,GAAG,EAAE,CAAC;SACZ;IACH,CAAC;CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// TODO: this code is a straight-copy from EventHubs. Need to merge.\n\nimport { CanonicalCode, Link, Span, SpanContext, SpanKind } from \"@opentelemetry/api\";\nimport { OperationOptions } from \"@azure/core-http\";\nimport { getTracer, OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * NOTE: This type is intended to mirror the relevant fields and structure from @azure/core-http OperationOptions\n *\n * Options for configuring tracing and the abortSignal.\n */\nexport type OperationOptionsBase = Pick<OperationOptions, \"abortSignal\" | \"tracingOptions\">;\n\n/**\n * @internal\n * @hidden\n */\nexport function getParentSpan(\n  options?: OperationTracingOptions\n): Span | SpanContext | null | undefined {\n  return options?.spanOptions?.parent;\n}\n\n/**\n * @internal\n * @hidden\n *\n * @param {(Span | SpanContext | null)} [parentSpan]\n * @param {SpanContext[]} [spanContextsToLink=[]]\n * @param {string} [entityPath]\n * @param {string} [host]\n */\nexport function createSendSpan(\n  parentSpan?: Span | SpanContext | null,\n  spanContextsToLink: SpanContext[] = [],\n  entityPath?: string,\n  host?: string\n): Span {\n  const links: Link[] = spanContextsToLink.map((context) => {\n    return {\n      context\n    };\n  });\n  const tracer = getTracer();\n  const span = tracer.startSpan(\"Azure.ServiceBus.send\", {\n    kind: SpanKind.CLIENT,\n    parent: parentSpan,\n    links\n  });\n\n  span.setAttribute(\"az.namespace\", \"Microsoft.ServiceBus\");\n  span.setAttribute(\"message_bus.destination\", entityPath);\n  span.setAttribute(\"peer.address\", host);\n\n  return span;\n}\n/**\n * The set of options to manually propagate `Span` context for distributed tracing.\n */\nexport interface TryAddOptions {\n  /**\n   * The `Span` or `SpanContext` to use as the `parent` of any spans created while calling operations that make a request to the service.\n   */\n  parentSpan?: Span | SpanContext | null;\n}\n\n/**\n * Runs the `fn` passed in and marks the span as completed with an error (and the\n * corresponding message) or as OK.\n *\n * @hidden\n * @internal\n */\nexport async function trace<T>(fn: () => Promise<T>, span: Span): Promise<T> {\n  try {\n    const ret = await fn();\n    span.setStatus({ code: CanonicalCode.OK });\n    return ret;\n  } catch (err) {\n    span.setStatus({\n      code: CanonicalCode.UNKNOWN,\n      message: err.message\n    });\n    throw err;\n  } finally {\n    span.end();\n  }\n}\n"]}