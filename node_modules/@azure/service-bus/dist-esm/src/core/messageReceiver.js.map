{"version":3,"file":"messageReceiver.js","sourceRoot":"","sources":["../../../src/core/messageReceiver.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  Constants,\n  ErrorNameConditionMapper,\n  MessagingError,\n  RetryOptions\n} from \"@azure/core-amqp\";\nimport { AmqpError, EventContext, OnAmqpEvent, Receiver, ReceiverOptions } from \"rhea-promise\";\nimport { receiverLogger as logger } from \"../log\";\nimport { LinkEntity, ReceiverType } from \"./linkEntity\";\nimport { ConnectionContext } from \"../connectionContext\";\nimport { DispositionType, ServiceBusMessageImpl } from \"../serviceBusMessage\";\nimport { getUniqueName } from \"../util/utils\";\nimport { ProcessErrorArgs, ReceiveMode, SubscribeOptions } from \"../models\";\nimport { DispositionStatusOptions } from \"./managementClient\";\nimport { AbortSignalLike } from \"@azure/core-http\";\nimport {\n  onMessageSettled,\n  DeferredPromiseAndTimer,\n  ReceiverHandlers,\n  createReceiverOptions\n} from \"./shared\";\nimport { LockRenewer } from \"./autoLockRenewer\";\nimport { translateServiceBusError } from \"../serviceBusError\";\n\n/**\n * @internal\n * @hidden\n */\nexport interface OnAmqpEventAsPromise extends OnAmqpEvent {\n  (context: EventContext): Promise<void>;\n}\n\n/**\n * @internal\n * @hidden\n */\nexport interface ReceiveOptions extends SubscribeOptions {\n  /**\n   * @property {number} [receiveMode] The mode in which messages should be received.\n   */\n  receiveMode: ReceiveMode;\n  /**\n   * Retry policy options that determine the mode, number of retries, retry interval etc.\n   */\n  retryOptions?: RetryOptions;\n\n  /**\n   * A LockAutoRenewer that will automatically renew locks based on user specified interval.\n   * This will be set if the user has chosen peekLock mode _and_ they've set a positive\n   * maxAutoRenewLockDurationInMs value when they created their receiver.\n   */\n  lockRenewer: LockRenewer | undefined;\n}\n\n/**\n * Describes the signature of the message handler passed to `registerMessageHandler` method.\n * @internal\n * @hidden\n */\nexport interface OnMessage {\n  /**\n   * Handler for processing each incoming message.\n   */\n  (message: ServiceBusMessageImpl): Promise<void>;\n}\n\n/**\n * Describes the signature of the error handler passed to `registerMessageHandler` method.\n *\n * @internal\n * @hidden\n */\nexport interface OnError {\n  /**\n   * Handler for any error that occurs while receiving or processing messages.\n   *\n   * NOTE: if this signature changes make sure you reflect those same changes in the\n   * `OnErrorNoContext` definition below.\n   */\n  (args: ProcessErrorArgs): void;\n}\n\n/**\n * An onError method but without the context property. Used when wrapping OnError\n * with an implicit ProcessErrorContext. Used by LockRenewer.\n *\n * @internal\n * @hidden\n */\nexport interface OnErrorNoContext {\n  (error: MessagingError | Error): void;\n}\n\n/**\n * @internal\n * @hidden\n * Describes the MessageReceiver that will receive messages from ServiceBus.\n * @class MessageReceiver\n */\nexport abstract class MessageReceiver extends LinkEntity<Receiver> {\n  /**\n   * @property {string} receiverType The type of receiver: \"batching\" or \"streaming\".\n   */\n  receiverType: ReceiverType;\n  /**\n   * @property {number} [receiveMode] The mode in which messages should be received.\n   * Default: ReceiveMode.peekLock\n   */\n  receiveMode: ReceiveMode;\n  /**\n   * @property {boolean} autoComplete Indicates whether `Message.complete()` should be called\n   * automatically after the message processing is complete while receiving messages with handlers.\n   * Default: false.\n   */\n  autoComplete: boolean;\n  /**\n   * @property {Map<number, Promise<any>>} _deliveryDispositionMap Maintains a map of deliveries that\n   * are being actively disposed. It acts as a store for correlating the responses received for\n   * active dispositions.\n   */\n  protected _deliveryDispositionMap: Map<number, DeferredPromiseAndTimer> = new Map<\n    number,\n    DeferredPromiseAndTimer\n  >();\n  /**\n   * @property {OnMessage} _onMessage The message handler provided by the user that will be wrapped\n   * inside _onAmqpMessage.\n   */\n  protected _onMessage!: OnMessage;\n  /**\n   * @property {OnMessage} _onError The error handler provided by the user that will be wrapped\n   * inside _onAmqpError.\n   */\n  protected _onError?: OnError;\n\n  /**\n   * A lock renewer that handles message lock auto-renewal. This is undefined unless the user\n   * has activated autolock renewal via ReceiveOptions. A single auto lock renewer is shared\n   * for all links for a `ServiceBusReceiver` instance.\n   */\n  protected _lockRenewer: LockRenewer | undefined;\n\n  constructor(\n    context: ConnectionContext,\n    entityPath: string,\n    receiverType: ReceiverType,\n    options: Omit<ReceiveOptions, \"maxConcurrentCalls\">\n  ) {\n    super(entityPath, entityPath, context, receiverType, logger, {\n      address: entityPath,\n      audience: `${context.config.endpoint}${entityPath}`\n    });\n\n    this.receiverType = receiverType;\n    this.receiveMode = options.receiveMode || \"peekLock\";\n\n    // If explicitly set to false then autoComplete is false else true (default).\n    this.autoComplete =\n      options.autoCompleteMessages === false ? options.autoCompleteMessages : true;\n    this._lockRenewer = options.lockRenewer;\n  }\n\n  /**\n   * Creates the options that need to be specified while creating an AMQP receiver link.\n   */\n  protected _createReceiverOptions(\n    useNewName: boolean,\n    handlers: ReceiverHandlers\n  ): ReceiverOptions {\n    const rcvrOptions: ReceiverOptions = createReceiverOptions(\n      useNewName ? getUniqueName(this.baseName) : this.name,\n      this.receiveMode,\n      {\n        address: this.address\n      },\n      {\n        onSettled: (context: EventContext) => {\n          return onMessageSettled(this.logPrefix, context.delivery, this._deliveryDispositionMap);\n        },\n        ...handlers\n      }\n    );\n\n    return rcvrOptions;\n  }\n\n  /**\n   * Creates a new AMQP receiver under a new AMQP session.\n   *\n   * @returns {Promise<void>} Promise<void>.\n   */\n  protected async _init(options: ReceiverOptions, abortSignal?: AbortSignalLike): Promise<void> {\n    try {\n      await this.initLink(options, abortSignal);\n\n      // It is possible for someone to close the receiver and then start it again.\n      // Thus make sure that the receiver is present in the client cache.\n      this._context.messageReceivers[this.name] = this as any;\n    } catch (err) {\n      err = translateServiceBusError(err);\n      logger.logError(err, \"%s An error occured while creating the receiver\", this.logPrefix);\n\n      // Fix the unhelpful error messages for the OperationTimeoutError that comes from `rhea-promise`.\n      if ((err as MessagingError).code === \"OperationTimeoutError\") {\n        err.message = \"Failed to create a receiver within allocated time and retry attempts.\";\n      }\n\n      throw err;\n    }\n  }\n\n  protected createRheaLink(\n    options: ReceiverOptions,\n    _abortSignal?: AbortSignalLike\n  ): Promise<Receiver> {\n    return this._context.connection.createReceiver(options);\n  }\n\n  /**\n   * React to receiver being detached due to given error.\n   * You may want to set up retries to recover the broken link and/or report error to user.\n   * @param error The error accompanying the receiver/session error or connection disconnected events\n   */\n  abstract onDetached(error?: AmqpError | Error): Promise<void>;\n\n  /**\n   * Clears lock renewal timers on all active messages, clears token remewal for current receiver,\n   * removes current MessageReceiver instance from cache, and closes the underlying AMQP receiver.\n   * @return {Promise<void>} Promise<void>.\n   */\n  async close(): Promise<void> {\n    this._lockRenewer?.stopAll(this);\n    await super.close();\n  }\n\n  /**\n   * Settles the message with the specified disposition.\n   * @param message The ServiceBus Message that needs to be settled.\n   * @param operation The disposition type.\n   * @param options Optional parameters that can be provided while disposing the message.\n   */\n  async settleMessage(\n    message: ServiceBusMessageImpl,\n    operation: DispositionType,\n    options?: DispositionStatusOptions\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      if (!options) options = {};\n      if (operation.match(/^(complete|abandon|defer|deadletter)$/) == null) {\n        return reject(new Error(`operation: '${operation}' is not a valid operation.`));\n      }\n      this._lockRenewer?.stop(this, message);\n      const delivery = message.delivery;\n      const timer = setTimeout(() => {\n        this._deliveryDispositionMap.delete(delivery.id);\n\n        logger.verbose(\n          \"%s Disposition for delivery id: %d, did not complete in %d milliseconds. \" +\n            \"Hence rejecting the promise with timeout error.\",\n          this.logPrefix,\n          delivery.id,\n          Constants.defaultOperationTimeoutInMs\n        );\n\n        const e: AmqpError = {\n          condition: ErrorNameConditionMapper.ServiceUnavailableError,\n          description:\n            \"Operation to settle the message has timed out. The disposition of the \" +\n            \"message may or may not be successful\"\n        };\n        return reject(translateServiceBusError(e));\n      }, Constants.defaultOperationTimeoutInMs);\n      this._deliveryDispositionMap.set(delivery.id, {\n        resolve: resolve,\n        reject: reject,\n        timer: timer\n      });\n      if (operation === DispositionType.complete) {\n        delivery.accept();\n      } else if (operation === DispositionType.abandon) {\n        const params: any = {\n          undeliverable_here: false\n        };\n        if (options.propertiesToModify) params.message_annotations = options.propertiesToModify;\n        delivery.modified(params);\n      } else if (operation === DispositionType.defer) {\n        const params: any = {\n          undeliverable_here: true\n        };\n        if (options.propertiesToModify) params.message_annotations = options.propertiesToModify;\n        delivery.modified(params);\n      } else if (operation === DispositionType.deadletter) {\n        const error: AmqpError = {\n          condition: Constants.deadLetterName,\n          info: {\n            ...options.propertiesToModify,\n            DeadLetterReason: options.deadLetterReason,\n            DeadLetterErrorDescription: options.deadLetterDescription\n          }\n        };\n        delivery.reject(error);\n      }\n    });\n  }\n}\n"]}