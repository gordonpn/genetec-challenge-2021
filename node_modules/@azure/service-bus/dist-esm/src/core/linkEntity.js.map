{"version":3,"file":"linkEntity.js","sourceRoot":"","sources":["../../../src/core/linkEntity.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Constants, TokenType, defaultLock, RequestResponseLink } from \"@azure/core-amqp\";\nimport { AccessToken } from \"@azure/core-auth\";\nimport { ConnectionContext } from \"../connectionContext\";\nimport {\n  AwaitableSender,\n  AwaitableSenderOptions,\n  generate_uuid,\n  Receiver,\n  ReceiverOptions,\n  SenderOptions\n} from \"rhea-promise\";\nimport { getUniqueName, StandardAbortMessage } from \"../util/utils\";\nimport { AbortError, AbortSignalLike } from \"@azure/abort-controller\";\nimport { ServiceBusLogger } from \"../log\";\nimport { SharedKeyCredential } from \"../servicebusSharedKeyCredential\";\nimport { ServiceBusError } from \"../serviceBusError\";\n\n/**\n * @internal\n * @hidden\n * Options passed to the constructor of LinkEntity\n */\nexport interface LinkEntityOptions {\n  /**\n   * @property {string} address The client entity address in one of the following forms:\n   */\n  address?: string;\n  /**\n   * @property {string} audience The client entity token audience in one of the following forms:\n   */\n  audience?: string;\n}\n\n/**\n * A simple grouping of the sender and receiver options. Only used\n * with the ManagementClient today.\n *\n * @internal\n * @hidden\n */\nexport interface RequestResponseLinkOptions {\n  senderOptions: SenderOptions;\n  receiverOptions: ReceiverOptions;\n  name?: string;\n}\n\n/**\n * @internal\n * @hidden\n */\nexport type ReceiverType =\n  | \"batching\" // batching receiver\n  | \"streaming\" // streaming receiver;\n  | \"session\"; // message session\n\n/**\n * @internal\n * @hidden\n */\ntype LinkOptionsT<\n  LinkT extends Receiver | AwaitableSender | RequestResponseLink\n> = LinkT extends Receiver\n  ? ReceiverOptions\n  : LinkT extends AwaitableSender\n  ? AwaitableSenderOptions\n  : LinkT extends RequestResponseLink\n  ? RequestResponseLinkOptions\n  : never;\n\n/**\n * @internal\n * @hidden\n */\ntype LinkTypeT<\n  LinkT extends Receiver | AwaitableSender | RequestResponseLink\n> = LinkT extends Receiver\n  ? ReceiverType\n  : LinkT extends AwaitableSender\n  ? \"sender\" // sender\n  : LinkT extends RequestResponseLink\n  ? \"mgmt\" // management link\n  : never;\n\n/**\n * @internal\n * @hidden\n * Describes the base class for entities like MessageSender, MessageReceiver and Management client.\n */\nexport abstract class LinkEntity<LinkT extends Receiver | AwaitableSender | RequestResponseLink> {\n  /**\n   * @property {string} id The unique name for the entity in the format:\n   * `${name of the entity}-${guid}`.\n   */\n  name: string;\n  /**\n   * @property {string} address The client entity address in one of the following forms:\n   *\n   * **Sender**\n   * - `\"<queue-name>\"`.\n   * - `\"<topic-name>\"`.\n   *\n   * **Receiver**\n   * - `\"<queue-name>\"`.\n   * - `\"<topic-name>\"`.\n   *\n   * **ManagementClient**\n   * -`\"$management\"`.\n   */\n  address: string;\n  /**\n   * @property {string} audience The client entity token audience in one of the following forms:\n   *\n   * **Sender**\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n   *\n   * **Receiver**\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n   *\n   * **ManagementClient**\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management\"`.\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management\"`.\n   */\n  audience: string;\n  /**\n   * @property _context Provides relevant information about the amqp connection,\n   * cbs and $management sessions, token provider, sender and receivers.\n   */\n  protected _context: ConnectionContext;\n  /**\n   * @property {NodeJS.Timer} _tokenRenewalTimer The token renewal timer that keeps track of when\n   * the Client Entity is due for token renewal.\n   */\n  private _tokenRenewalTimer?: NodeJS.Timer;\n  /**\n   * @property _tokenTimeout Indicates token timeout\n   */\n  protected _tokenTimeout?: number;\n\n  /**\n   * The actual rhea link (of type Receiver or AwaitableSender) or RequestResponseLink\n   */\n  private _link?: LinkT;\n\n  /**\n   * The log prefix for any log messages.\n   */\n  private _logPrefix: string;\n\n  public get logPrefix(): string {\n    return this._logPrefix;\n  }\n\n  /**\n   * Indicates that close() has been called on this link and\n   * that it should not be allowed to reopen.\n   */\n  private _wasClosedPermanently: boolean = false;\n\n  /**\n   * A lock that ensures that opening and closing this\n   * link properly cooperate.\n   */\n  private _openLock: string = generate_uuid();\n\n  /**\n   * Creates a new ClientEntity instance.\n   * @constructor\n   * @param baseName The base name to use for the link. A unique ID will be appended to this.\n   * @param entityPath The entity path (ex: 'your-queue')\n   * @param context The connection context.\n   * @param options Options that can be provided while creating the LinkEntity.\n   */\n  constructor(\n    public readonly baseName: string,\n    public readonly entityPath: string,\n    context: ConnectionContext,\n    private _linkType: LinkTypeT<LinkT>,\n    private _logger: ServiceBusLogger,\n    options?: LinkEntityOptions\n  ) {\n    if (!options) options = {};\n    this._context = context;\n    this.address = options.address || \"\";\n    this.audience = options.audience || \"\";\n    this.name = getUniqueName(baseName);\n    this._logPrefix = `[${context.connectionId}|${this._linkType}:${this.name}]`;\n  }\n\n  /**\n   * Determines whether the AMQP link is open. If open then returns true else returns false.\n   * @return {boolean} boolean\n   */\n  isOpen(): boolean {\n    const result: boolean = this._link ? this._link.isOpen() : false;\n    this._logger.verbose(`${this._logPrefix} is open? ${result}`);\n    return result;\n  }\n\n  /**\n   * Initializes this LinkEntity, setting this._link with the result of  `createRheaLink`, which\n   * is implemented by child classes.\n   *\n   * @returns A Promise that resolves when the link has been properly initialized\n   * @throws {AbortError} if the link has been closed via 'close'\n   */\n  async initLink(options: LinkOptionsT<LinkT>, abortSignal?: AbortSignalLike): Promise<void> {\n    // we'll check that the connection isn't in the process of recycling (and if so, wait for it to complete)\n    await this._context.readyToOpenLink();\n\n    this._logger.verbose(\n      `${this._logPrefix} Attempting to acquire lock token ${this._openLock} for initializing link`\n    );\n    return defaultLock.acquire(this._openLock, () => {\n      this._logger.verbose(\n        `${this._logPrefix} Lock ${this._openLock} acquired for initializing link`\n      );\n      return this._initLinkImpl(options, abortSignal);\n    });\n  }\n\n  private async _initLinkImpl(\n    options: LinkOptionsT<LinkT>,\n    abortSignal?: AbortSignalLike\n  ): Promise<void> {\n    const checkAborted = (): void => {\n      if (abortSignal?.aborted) {\n        throw new AbortError(StandardAbortMessage);\n      }\n    };\n\n    const connectionId = this._context.connectionId;\n    checkAborted();\n\n    if (options.name) {\n      this.name = options.name;\n      this._logPrefix = `[${connectionId}|${this._linkType}:${this.name}]`;\n    }\n\n    if (this._wasClosedPermanently) {\n      this._logger.verbose(`${this._logPrefix} Link has been permanently closed. Not reopening.`);\n      throw new AbortError(`Link has been permanently closed. Not reopening.`);\n    }\n\n    if (this.isOpen()) {\n      this._logger.verbose(`${this._logPrefix} Link is already open. Returning.`);\n      return;\n    }\n\n    this._logger.verbose(\n      `${this._logPrefix} Is not open and is not currently connecting. Opening.`\n    );\n\n    try {\n      await this._negotiateClaim();\n\n      checkAborted();\n      this.checkIfConnectionReady();\n\n      this._logger.verbose(`${this._logPrefix} Creating with options %O`, options);\n      this._link = await this.createRheaLink(options);\n      checkAborted();\n\n      this._ensureTokenRenewal();\n\n      this._logger.verbose(`${this._logPrefix} Link has been created.`);\n    } catch (err) {\n      this._logger.logError(err, `${this._logPrefix} Error thrown when creating the link`);\n      await this.closeLinkImpl();\n      throw err;\n    }\n  }\n\n  /**\n   * Clears token renewal for current link, removes current LinkEntity instance from cache,\n   * and closes the underlying AMQP link.\n   * Once closed, this instance of LinkEntity is not meant to be re-used.\n   */\n  async close(): Promise<void> {\n    // Set the flag to indicate that this instance of LinkEntity is not meant to be re-used.\n    this._wasClosedPermanently = true;\n\n    this._logger.verbose(`${this.logPrefix} permanently closing this link.`);\n\n    // Remove the underlying AMQP link from the cache\n    switch (this._linkType) {\n      case \"s\": {\n        delete this._context.senders[this.name];\n        break;\n      }\n      case \"br\":\n      case \"sr\": {\n        delete this._context.messageReceivers[this.name];\n        break;\n      }\n      case \"ms\": {\n        delete this._context.messageSessions[this.name];\n        break;\n      }\n    }\n\n    await this.closeLink();\n    this._logger.verbose(`${this.logPrefix} permanently closed this link.`);\n  }\n\n  /**\n   * NOTE: This method should be implemented by any child classes to actually create the underlying\n   * Rhea link (AwaitableSender or Receiver or RequestResponseLink)\n   *\n   * @param _options\n   */\n  protected abstract createRheaLink(_options: LinkOptionsT<LinkT>): Promise<LinkT>;\n\n  /**\n   * Closes the internally held rhea link, stops the token renewal timer and sets\n   * the this._link field to undefined.\n   */\n  protected closeLink(): Promise<void> {\n    this._logger.verbose(\n      `${this._logPrefix} Attempting to acquire lock token ${this._openLock} for closing link`\n    );\n    return defaultLock.acquire(this._openLock, () => {\n      this._logger.verbose(`${this._logPrefix} Lock ${this._openLock} acquired for closing link`);\n      return this.closeLinkImpl();\n    });\n  }\n\n  private async closeLinkImpl(): Promise<void> {\n    this._logger.verbose(`${this._logPrefix} closeLinkImpl() called`);\n\n    clearTimeout(this._tokenRenewalTimer as NodeJS.Timer);\n    this._tokenRenewalTimer = undefined;\n\n    if (this._link) {\n      try {\n        const link = this._link;\n        this._link = undefined;\n\n        // This should take care of closing the link and it's underlying session. This should also\n        // remove them from the internal map.\n        await link.close();\n        this._logger.verbose(`${this._logPrefix} closed.`);\n      } catch (err) {\n        this._logger.logError(err, `${this._logPrefix} An error occurred while closing the link`);\n      }\n    }\n  }\n\n  /**\n   * Provides the current type of the ClientEntity.\n   * @return {string} The entity type.\n   */\n  private get _type(): string {\n    let result = \"LinkEntity\";\n    if ((this as any).constructor && (this as any).constructor.name) {\n      result = (this as any).constructor.name;\n    }\n    return result;\n  }\n\n  protected get wasClosedPermanently(): boolean {\n    return this._wasClosedPermanently;\n  }\n\n  protected get link(): LinkT | undefined {\n    return this._link;\n  }\n\n  /**\n   * Negotiates the cbs claim for the ClientEntity.\n   * @param {boolean} [setTokenRenewal] Set the token renewal timer. Default false.\n   * @return {Promise<void>} Promise<void>\n   */\n  private async _negotiateClaim(setTokenRenewal?: boolean): Promise<void> {\n    this._logger.verbose(`${this._logPrefix} negotiateclaim() has been called`);\n\n    // Wait for the connectionContext to be ready to open the link.\n    this.checkIfConnectionReady();\n\n    // Acquire the lock and establish a cbs session if it does not exist on the connection.\n    // Although node.js is single threaded, we need a locking mechanism to ensure that a\n    // race condition does not happen while creating a shared resource (in this case the\n    // cbs session, since we want to have exactly 1 cbs session per connection).\n    this._logger.verbose(\n      \"%s Acquiring cbs lock: '%s' for creating the cbs session while creating the %s: \" +\n        \"'%s' with address: '%s'.\",\n      this.logPrefix,\n      this._context.cbsSession.cbsLock,\n      this._type,\n      this.name,\n      this.address\n    );\n    await defaultLock.acquire(this._context.cbsSession.cbsLock, async () => {\n      this.checkIfConnectionReady();\n      return this._context.cbsSession.init();\n    });\n    let tokenObject: AccessToken;\n    let tokenType: TokenType;\n    if (this._context.tokenCredential instanceof SharedKeyCredential) {\n      tokenObject = this._context.tokenCredential.getToken(this.audience);\n      tokenType = TokenType.CbsTokenTypeSas;\n\n      // expiresOnTimestamp can be 0 if the token is not meant to be renewed\n      // (ie, SharedAccessSignatureCredential)\n      if (tokenObject.expiresOnTimestamp > 0) {\n        // renew sas token in every 45 minutes\n        this._tokenTimeout = (3600 - 900) * 1000;\n      }\n    } else {\n      const aadToken = await this._context.tokenCredential.getToken(Constants.aadServiceBusScope);\n      if (!aadToken) {\n        throw new Error(`Failed to get token from the provided \"TokenCredential\" object`);\n      }\n      tokenObject = aadToken;\n      tokenType = TokenType.CbsTokenTypeJwt;\n      this._tokenTimeout = tokenObject.expiresOnTimestamp - Date.now() - 2 * 60 * 1000;\n    }\n    this._logger.verbose(\n      \"%s %s: calling negotiateClaim for audience '%s'.\",\n      this.logPrefix,\n      this._type,\n      this.audience\n    );\n    // Acquire the lock to negotiate the CBS claim.\n    this._logger.verbose(\n      \"%s Acquiring cbs lock: '%s' for cbs auth for %s: '%s' with address '%s'.\",\n      this.logPrefix,\n      this._context.negotiateClaimLock,\n      this._type,\n      this.name,\n      this.address\n    );\n    if (!tokenObject) {\n      throw new Error(\"Token cannot be null\");\n    }\n    await defaultLock.acquire(this._context.negotiateClaimLock, () => {\n      this.checkIfConnectionReady();\n      return this._context.cbsSession.negotiateClaim(this.audience, tokenObject.token, tokenType);\n    });\n    this._logger.verbose(\n      \"%s Negotiated claim for %s '%s' with with address: %s\",\n      this.logPrefix,\n      this._type,\n      this.name,\n      this.address\n    );\n    if (setTokenRenewal) {\n      this._ensureTokenRenewal();\n    }\n  }\n\n  /**\n   * Checks to see if the connection is in a \"reopening\" state. If it is\n   * we need to _not_ use it otherwise we'll trigger some race conditions\n   * within rhea (for instance, errors about _process not being defined).\n   */\n  private checkIfConnectionReady() {\n    if (!this._context.isConnectionClosing()) {\n      return;\n    }\n\n    this._logger.verbose(\n      `${this._logPrefix} Connection is reopening, aborting link initialization.`\n    );\n    const err = new ServiceBusError(\n      \"Connection is reopening, aborting link initialization.\",\n      \"GeneralError\"\n    );\n    err.retryable = true;\n    throw err;\n  }\n\n  /**\n   * Ensures that the token is renewed within the predefined renewal margin.\n   * @returns {void}\n   */\n  private _ensureTokenRenewal(): void {\n    if (!this._tokenTimeout) {\n      return;\n    }\n    // Clear the existing token renewal timer.\n    // This scenario can happen if the connection goes down and is brought back up\n    // before the `nextRenewalTimeout` was reached.\n    if (this._tokenRenewalTimer) {\n      clearTimeout(this._tokenRenewalTimer);\n    }\n    this._tokenRenewalTimer = setTimeout(async () => {\n      try {\n        await this._negotiateClaim(true);\n      } catch (err) {\n        this._logger.logError(\n          err,\n          \"%s %s '%s' with address %s, an error occurred while renewing the token\",\n          this.logPrefix,\n          this._type,\n          this.name,\n          this.address\n        );\n      }\n    }, this._tokenTimeout);\n    this._logger.verbose(\n      \"%s %s '%s' with address %s, has next token renewal in %d milliseconds @(%s).\",\n      this.logPrefix,\n      this._type,\n      this.name,\n      this.address,\n      this._tokenTimeout,\n      new Date(Date.now() + this._tokenTimeout).toString()\n    );\n  }\n}\n"]}