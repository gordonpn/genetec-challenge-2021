{"version":3,"file":"managementClient.js","sourceRoot":"","sources":["../../../src/core/managementClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport Long from \"long\";\nimport {\n  EventContext,\n  ReceiverOptions,\n  message as RheaMessageUtil,\n  SenderOptions,\n  generate_uuid,\n  string_to_uuid,\n  types,\n  Typed,\n  ReceiverEvents,\n  Message as RheaMessage\n} from \"rhea-promise\";\nimport {\n  ConditionErrorNameMapper,\n  Constants,\n  MessagingError,\n  RequestResponseLink,\n  SendRequestOptions\n} from \"@azure/core-amqp\";\nimport { ConnectionContext } from \"../connectionContext\";\nimport {\n  DispositionType,\n  ServiceBusReceivedMessage,\n  ServiceBusMessage,\n  ServiceBusMessageImpl,\n  getMessagePropertyTypeMismatchError,\n  toRheaMessage,\n  fromRheaMessage\n} from \"../serviceBusMessage\";\nimport { LinkEntity, RequestResponseLinkOptions } from \"./linkEntity\";\nimport { managementClientLogger, receiverLogger, senderLogger, ServiceBusLogger } from \"../log\";\nimport { toBuffer } from \"../util/utils\";\nimport {\n  InvalidMaxMessageCountError,\n  throwErrorIfConnectionClosed,\n  throwTypeErrorIfParameterIsEmptyString,\n  throwTypeErrorIfParameterMissing,\n  throwTypeErrorIfParameterNotLong,\n  throwTypeErrorIfParameterTypeMismatch\n} from \"../util/errors\";\nimport { max32BitNumber } from \"../util/constants\";\nimport { Buffer } from \"buffer\";\nimport { OperationOptionsBase } from \"./../modelsToBeSharedWithEventHubs\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { ReceiveMode } from \"../models\";\nimport { translateServiceBusError } from \"../serviceBusError\";\nimport { defaultDataTransformer } from \"../dataTransformer\";\n\n/**\n * @internal\n * @hidden\n */\nexport interface SendManagementRequestOptions extends SendRequestOptions {\n  /**\n   * The name of the sender or receiver link associated with the managmenet operations.\n   * This is used for service side optimization.\n   */\n  associatedLinkName?: string;\n}\n\n/**\n * Represents a Rule on a Subscription that is used to filter the incoming message from the\n * Subscription.\n */\nexport interface RuleDescription {\n  /**\n   * Filter expression used to match messages. Supports 2 types:\n   * - `string`: SQL-like condition expression that is evaluated against the messages'\n   * user-defined properties and system properties. All system properties will be prefixed with\n   * `sys.` in the condition expression.\n   * - `CorrelationRuleFilter`: Properties of the filter will be used to match with the message properties.\n   */\n  filter?: string | CorrelationRuleFilter;\n  /**\n   * Action to perform if the message satisfies the filtering expression.\n   */\n  action?: string;\n  /**\n   * Represents the name of the rule.\n   */\n  name: string;\n}\n\n/**\n * Represents the correlation filter expression.\n * A CorrelationRuleFilter holds a set of conditions that are matched against user and system properties\n * of incoming messages from a Subscription.\n */\nexport interface CorrelationRuleFilter {\n  /**\n   * Value to be matched with the `correlationId` property of the incoming message.\n   */\n  correlationId?: string;\n  /**\n   * Value to be matched with the `messageId` property of the incoming message.\n   */\n  messageId?: string;\n  /**\n   * Value to be matched with the `to` property of the incoming message.\n   */\n  to?: string;\n  /**\n   * Value to be matched with the `replyTo` property of the incoming message.\n   */\n  replyTo?: string;\n  /**\n   * Value to be matched with the `subject` property of the incoming message.\n   */\n  subject?: string;\n  /**\n   * Value to be matched with the `sessionId` property of the incoming message.\n   */\n  sessionId?: string;\n  /**\n   * Value to be matched with the `replyToSessionId` property of the incoming message.\n   */\n  replyToSessionId?: string;\n  /**\n   * Value to be matched with the `contentType` property of the incoming message.\n   */\n  contentType?: string;\n  /**\n   * Value to be matched with the user properties of the incoming message.\n   */\n  applicationProperties?: { [key: string]: string | number | boolean | Date };\n}\n\n/**\n * @internal\n * @hidden\n */\nconst correlationProperties = [\n  \"correlationId\",\n  \"messageId\",\n  \"to\",\n  \"replyTo\",\n  \"subject\",\n  \"sessionId\",\n  \"replyToSessionId\",\n  \"contentType\",\n  \"applicationProperties\"\n];\n\n/**\n * @internal\n * @hidden\n * Options to set when updating the disposition status\n */\nexport interface DispositionStatusOptions extends OperationOptionsBase {\n  /**\n   * @property [propertiesToModify] A map of Service Bus brokered message properties\n   * to modify.\n   */\n  propertiesToModify?: { [key: string]: any };\n  /**\n   * @property [deadLetterReason] The deadletter reason. May be set if disposition status\n   * is set to suspended.\n   */\n  deadLetterReason?: string;\n  /**\n   * @property [deadLetterDescription] The deadletter description. May be set if disposition status\n   * is set to suspended.\n   */\n  deadLetterDescription?: string;\n  /**\n   * This should only be provided if `session` is enabled for a Queue or Topic.\n   */\n  sessionId?: string;\n}\n\n/**\n * @internal\n * @hidden\n * Options passed to the constructor of ManagementClient\n */\nexport interface ManagementClientOptions {\n  address?: string;\n  audience?: string;\n}\n\n/**\n * @internal\n * @hidden\n * @class ManagementClient\n * Describes the ServiceBus Management Client that talks\n * to the $management endpoint over AMQP connection.\n */\nexport class ManagementClient extends LinkEntity<RequestResponseLink> {\n  /**\n   * @property {string} replyTo The reply to Guid for the management client.\n   */\n  replyTo: string = generate_uuid();\n  /**\n   * @property _lastPeekedSequenceNumber Provides the sequence number of the last peeked message.\n   */\n  private _lastPeekedSequenceNumber: Long = Long.ZERO;\n\n  /**\n   * @constructor\n   * Instantiates the management client.\n   * @param context The connection context\n   * @param entityPath - The name/path of the entity (queue/topic/subscription name)\n   * for which the management request needs to be made.\n   * @param {ManagementClientOptions} [options] Options to be provided for creating the\n   * \"$management\" client.\n   */\n  constructor(context: ConnectionContext, entityPath: string, options?: ManagementClientOptions) {\n    super(`${entityPath}/$management`, entityPath, context, \"mgmt\", managementClientLogger, {\n      address: options && options.address ? options.address : Constants.management,\n      audience:\n        options && options.audience\n          ? options.audience\n          : `${context.config.endpoint}${entityPath}/$management`\n    });\n    this._context = context;\n  }\n\n  private async _init(abortSignal?: AbortSignalLike): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n    try {\n      const rxopt: ReceiverOptions = {\n        source: { address: this.address },\n        name: this.replyTo,\n        target: { address: this.replyTo },\n        onSessionError: (context: EventContext) => {\n          const sbError = translateServiceBusError(context.session!.error!);\n          managementClientLogger.logError(\n            sbError,\n            `${this.logPrefix} An error occurred on the session for request/response links for $management`\n          );\n        }\n      };\n      const sropt: SenderOptions = {\n        target: { address: this.address },\n        onError: (context: EventContext) => {\n          const ehError = translateServiceBusError(context.sender!.error!);\n          managementClientLogger.logError(\n            ehError,\n            `${this.logPrefix} An error occurred on the $management sender link`\n          );\n        }\n      };\n\n      // Even if multiple parallel requests reach here, the initLink secures a lock\n      // to ensure there won't be multiple initializations\n      await this.initLink(\n        {\n          senderOptions: sropt,\n          receiverOptions: rxopt\n        },\n        abortSignal\n      );\n    } catch (err) {\n      err = translateServiceBusError(err);\n      managementClientLogger.logError(\n        err,\n        `${this.logPrefix} An error occurred while establishing the $management links`\n      );\n      throw err;\n    }\n  }\n\n  protected async createRheaLink(\n    options: RequestResponseLinkOptions\n  ): Promise<RequestResponseLink> {\n    const rheaLink = await RequestResponseLink.create(\n      this._context.connection,\n      options.senderOptions,\n      options.receiverOptions\n    );\n    // Attach listener for the `receiver_error` events to log the errors.\n\n    // \"message\" event listener is added in core-amqp.\n    // \"rhea\" doesn't allow setting only the \"onError\" handler in the options if it is not accompanied by an \"onMessage\" handler.\n    // Hence, not passing onError handler in the receiver options, adding a handler below.\n    rheaLink.receiver.on(ReceiverEvents.receiverError, (context: EventContext) => {\n      const ehError = translateServiceBusError(context.receiver!.error!);\n      managementClientLogger.logError(\n        ehError,\n        `${this.logPrefix} An error occurred on the $management receiver link`\n      );\n    });\n    return rheaLink;\n  }\n\n  /**\n   * Given array of typed values, returns the element in given index\n   */\n  private _safelyGetTypedValueFromArray(data: Typed[], index: number): any {\n    return Array.isArray(data) && data.length > index && data[index]\n      ? data[index].value\n      : undefined;\n  }\n\n  private async _makeManagementRequest(\n    request: RheaMessage,\n    internalLogger: ServiceBusLogger,\n    sendRequestOptions: SendManagementRequestOptions = {}\n  ): Promise<RheaMessage> {\n    if (request.message_id == undefined) {\n      request.message_id = generate_uuid();\n    }\n    const retryTimeoutInMs =\n      sendRequestOptions.timeoutInMs ?? Constants.defaultOperationTimeoutInMs;\n    const initOperationStartTime = Date.now();\n    const actionAfterTimeout = (reject: (reason?: any) => void) => {\n      const desc: string = `The request with message_id \"${request.message_id}\" timed out. Please try again later.`;\n      const e: Error = {\n        name: \"OperationTimeoutError\",\n        message: desc\n      };\n\n      reject(e);\n    };\n\n    let waitTimer: ReturnType<typeof setTimeout>;\n    const operationTimeout = new Promise<void>((_, reject) => {\n      waitTimer = setTimeout(() => actionAfterTimeout(reject), retryTimeoutInMs);\n    });\n    internalLogger.verbose(`${this.logPrefix} Acquiring lock to get the management req res link.`);\n\n    try {\n      if (!this.isOpen()) {\n        await Promise.race([this._init(sendRequestOptions?.abortSignal), operationTimeout]);\n      }\n    } finally {\n      clearTimeout(waitTimer!);\n    }\n\n    // time taken by the init operation\n    const timeTakenByInit = Date.now() - initOperationStartTime;\n    // Left over time\n    sendRequestOptions.timeoutInMs = retryTimeoutInMs - timeTakenByInit;\n\n    try {\n      if (!request.message_id) request.message_id = generate_uuid();\n      return await this.link!.sendRequest(request, sendRequestOptions);\n    } catch (err) {\n      err = translateServiceBusError(err);\n      internalLogger.logError(\n        err,\n        \"%s An error occurred during send on management request-response link with address \" +\n          \"'%s': %O\",\n        this.logPrefix,\n        this.address,\n        err\n      );\n      throw err;\n    }\n  }\n\n  /**\n   * Closes the AMQP management session to the ServiceBus namespace for this client,\n   * returning a promise that will be resolved when disconnection is completed.\n   * @return Promise<void>\n   */\n  async close(): Promise<void> {\n    try {\n      // Always clear the timeout, as the isOpen check may report\n      // false without ever having cleared the timeout otherwise.\n\n      // NOTE: management link currently doesn't have a separate concept of \"detaching\" like\n      // the other links do. When we add handling of this (via the onDetached call, like other links)\n      // we can change this back to closeLink(\"permanent\").\n      await this.closeLink();\n      managementClientLogger.verbose(\"Successfully closed the management session.\");\n    } catch (err) {\n      managementClientLogger.logError(\n        err,\n        `${this.logPrefix} An error occurred while closing the management session`\n      );\n      throw err;\n    }\n  }\n\n  /**\n   * Fetches the next batch of active messages. The first call to `peek()` fetches the first\n   * active message for this client. Each subsequent call fetches the subsequent message in the\n   * entity.\n   *\n   * Unlike a `received` message, `peeked` message will not have lock token associated with it,\n   * and hence it cannot be `Completed/Abandoned/Deferred/Deadlettered/Renewed`. This method will\n   * also fetch even Deferred messages (but not Deadlettered message).\n   *\n   * @param messageCount The number of messages to retrieve. Default value `1`.\n   * @returns Promise<ReceivedSBMessage[]>\n   */\n  async peek(\n    messageCount: number,\n    options?: OperationOptionsBase & SendManagementRequestOptions\n  ): Promise<ServiceBusReceivedMessage[]> {\n    throwErrorIfConnectionClosed(this._context);\n    return this.peekBySequenceNumber(\n      this._lastPeekedSequenceNumber.add(1),\n      messageCount,\n      undefined,\n      options\n    );\n  }\n\n  /**\n   * Fetches the next batch of active messages in the current MessageSession. The first call to\n   * `peek()` fetches the first active message for this client. Each subsequent call fetches the\n   * subsequent message in the entity.\n   *\n   * Unlike a `received` message, `peeked` message will not have lock token associated with it,\n   * and hence it cannot be `Completed/Abandoned/Deferred/Deadlettered/Renewed`.  This method will\n   * also fetch even Deferred messages (but not Deadlettered message).\n   *\n   * @param sessionId The sessionId from which messages need to be peeked.\n   * @param messageCount The number of messages to retrieve. Default value `1`.\n   * @returns Promise<ReceivedMessageInfo[]>\n   */\n  async peekMessagesBySession(\n    sessionId: string,\n    messageCount: number,\n    options?: OperationOptionsBase & SendManagementRequestOptions\n  ): Promise<ServiceBusReceivedMessage[]> {\n    throwErrorIfConnectionClosed(this._context);\n    return this.peekBySequenceNumber(\n      this._lastPeekedSequenceNumber.add(1),\n      messageCount,\n      sessionId,\n      options\n    );\n  }\n\n  /**\n   * Peeks the desired number of messages from the specified sequence number.\n   *\n   * @param fromSequenceNumber The sequence number from where to read the message.\n   * @param messageCount The number of messages to retrieve. Default value `1`.\n   * @param sessionId The sessionId from which messages need to be peeked.\n   * @returns Promise<ReceivedMessageInfo[]>\n   */\n  async peekBySequenceNumber(\n    fromSequenceNumber: Long,\n    maxMessageCount: number,\n    sessionId?: string,\n    options?: OperationOptionsBase & SendManagementRequestOptions\n  ): Promise<ServiceBusReceivedMessage[]> {\n    throwErrorIfConnectionClosed(this._context);\n    const connId = this._context.connectionId;\n\n    // Checks for fromSequenceNumber\n    throwTypeErrorIfParameterMissing(connId, \"fromSequenceNumber\", fromSequenceNumber);\n    throwTypeErrorIfParameterNotLong(connId, \"fromSequenceNumber\", fromSequenceNumber);\n\n    // Checks for maxMessageCount\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"maxMessageCount\",\n      maxMessageCount\n    );\n    throwTypeErrorIfParameterTypeMismatch(\n      this._context.connectionId,\n      \"maxMessageCount\",\n      maxMessageCount,\n      \"number\"\n    );\n\n    if (isNaN(maxMessageCount) || maxMessageCount < 1) {\n      throw new TypeError(InvalidMaxMessageCountError);\n    }\n\n    const messageList: ServiceBusReceivedMessage[] = [];\n    try {\n      const messageBody: any = {};\n      messageBody[Constants.fromSequenceNumber] = types.wrap_long(\n        Buffer.from(fromSequenceNumber.toBytesBE())\n      );\n      messageBody[Constants.messageCount] = types.wrap_int(maxMessageCount!);\n      if (sessionId != undefined) {\n        messageBody[Constants.sessionIdMapKey] = sessionId;\n      }\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.peekMessage\n        }\n      };\n      if (options?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] = options?.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n\n      // TODO: it'd be nice to attribute this peek request to the actual receiver that made it. So have them pass in a\n      // log prefix rather than just falling back to the management links.\n      receiverLogger.verbose(\n        \"%s Peek by sequence number request body: %O.\",\n        this.logPrefix,\n        request.body\n      );\n\n      const result = await this._makeManagementRequest(request, receiverLogger, options);\n      if (result.application_properties!.statusCode !== 204) {\n        const messages = result.body.messages as { message: Buffer }[];\n        for (const msg of messages) {\n          const decodedMessage = RheaMessageUtil.decode(msg.message);\n          const message = fromRheaMessage(decodedMessage as any);\n          message.body = defaultDataTransformer.decode(message.body);\n          messageList.push(message);\n          this._lastPeekedSequenceNumber = message.sequenceNumber!;\n        }\n      }\n    } catch (err) {\n      const error = translateServiceBusError(err) as MessagingError;\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the request to peek messages to $management endpoint`\n      );\n      // statusCode == 404 then do not throw\n      if (error.code !== ConditionErrorNameMapper[\"com.microsoft:message-not-found\"]) {\n        throw error;\n      }\n    }\n    return messageList;\n  }\n\n  /**\n   * Renews the lock on the message. The lock will be renewed based on the setting specified on\n   * the queue.\n   *\n   * When a message is received in `PeekLock` mode, the message is locked on the server for this\n   * receiver instance for a duration as specified during the Queue/Subscription creation\n   * (LockDuration). If processing of the message requires longer than this duration, the\n   * lock needs to be renewed. For each renewal, it resets the time the message is locked by the\n   * LockDuration set on the Entity.\n   *\n   * @param lockToken Lock token of the message\n   * @param options Options that can be set while sending the request.\n   * @returns Promise<Date> New lock token expiry date and time in UTC format.\n   */\n  async renewLock(lockToken: string, options?: SendManagementRequestOptions): Promise<Date> {\n    throwErrorIfConnectionClosed(this._context);\n    if (!options) options = {};\n    if (options.timeoutInMs == null) options.timeoutInMs = 5000;\n\n    try {\n      const messageBody: any = {};\n\n      messageBody[Constants.lockTokens] = types.wrap_array(\n        [string_to_uuid(lockToken)],\n        0x98,\n        undefined\n      );\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.renewLock\n        }\n      };\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      if (options.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] = options.associatedLinkName;\n      }\n      receiverLogger.verbose(\n        \"[%s] Renew message Lock request: %O.\",\n        this._context.connectionId,\n        request\n      );\n      const result = await this._makeManagementRequest(request, receiverLogger, {\n        abortSignal: options?.abortSignal,\n        requestName: \"renewLock\"\n      });\n      const lockedUntilUtc = new Date(result.body.expirations[0]);\n      return lockedUntilUtc;\n    } catch (err) {\n      const error = translateServiceBusError(err);\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the renew lock request to $management endpoint`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Schedules an array of messages to appear on Service Bus at a later time.\n   *\n   * @param scheduledEnqueueTimeUtc - The UTC time at which the messages should be enqueued.\n   * @param messages - An array of messages that needs to be scheduled.\n   * @returns Promise<number> The sequence numbers of messages that were scheduled.\n   */\n  async scheduleMessages(\n    scheduledEnqueueTimeUtc: Date,\n    messages: ServiceBusMessage[],\n    options?: OperationOptionsBase & SendManagementRequestOptions\n  ): Promise<Long[]> {\n    throwErrorIfConnectionClosed(this._context);\n    if (!messages.length) {\n      return [];\n    }\n    const messageBody: any[] = [];\n    for (let i = 0; i < messages.length; i++) {\n      const item = messages[i];\n      if (!item.messageId) item.messageId = generate_uuid();\n      item.scheduledEnqueueTimeUtc = scheduledEnqueueTimeUtc;\n      const amqpMessage = toRheaMessage(item);\n      amqpMessage.body = defaultDataTransformer.encode(amqpMessage.body);\n\n      try {\n        const entry: any = {\n          message: RheaMessageUtil.encode(amqpMessage),\n          \"message-id\": item.messageId\n        };\n        if (item.sessionId) {\n          entry[Constants.sessionIdMapKey] = item.sessionId;\n        }\n        if (item.partitionKey) {\n          entry[\"partition-key\"] = item.partitionKey;\n        }\n\n        // Will be required later for implementing Transactions\n        // if (item.viaPartitionKey) {\n        //   entry[\"via-partition-key\"] = item.viaPartitionKey;\n        // }\n\n        const wrappedEntry = types.wrap_map(entry);\n        messageBody.push(wrappedEntry);\n      } catch (err) {\n        let error: Error;\n        if (err instanceof TypeError || err.name === \"TypeError\") {\n          // `RheaMessageUtil.encode` can fail if message properties are of invalid type\n          // rhea throws errors with name `TypeError` but not an instance of `TypeError`, so catch them too\n          // Errors in such cases do not have user-friendly message or call stack\n          // So use `getMessagePropertyTypeMismatchError` to get a better error message\n          error = translateServiceBusError(getMessagePropertyTypeMismatchError(item) || err);\n        } else {\n          error = translateServiceBusError(err);\n        }\n        senderLogger.logError(\n          error,\n          `${this.logPrefix} An error occurred while encoding the item at position ${i} in the messages array`\n        );\n        throw error;\n      }\n    }\n    try {\n      const request: RheaMessage = {\n        body: { messages: messageBody },\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.scheduleMessage\n        }\n      };\n      if (options?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] = options?.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      senderLogger.verbose(\"%s Schedule messages request body: %O.\", this.logPrefix, request.body);\n      const result = await this._makeManagementRequest(request, senderLogger, options);\n      const sequenceNumbers = result.body[Constants.sequenceNumbers];\n      const sequenceNumbersAsLong = [];\n      for (let i = 0; i < sequenceNumbers.length; i++) {\n        if (typeof sequenceNumbers[i] === \"number\") {\n          sequenceNumbersAsLong.push(Long.fromNumber(sequenceNumbers[i]));\n        } else {\n          sequenceNumbersAsLong.push(Long.fromBytesBE(sequenceNumbers[i]));\n        }\n      }\n      return sequenceNumbersAsLong;\n    } catch (err) {\n      const error = translateServiceBusError(err);\n      senderLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the request to schedule messages to $management endpoint`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Cancels an array of messages that were scheduled.\n   * @param sequenceNumbers - An Array of sequence numbers of the message to be cancelled.\n   * @returns Promise<void>\n   */\n  async cancelScheduledMessages(\n    sequenceNumbers: Long[],\n    options?: OperationOptionsBase & SendManagementRequestOptions\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n    if (!sequenceNumbers.length) {\n      return;\n    }\n    const messageBody: any = {};\n    messageBody[Constants.sequenceNumbers] = [];\n    for (let i = 0; i < sequenceNumbers.length; i++) {\n      const sequenceNumber = sequenceNumbers[i];\n      try {\n        messageBody[Constants.sequenceNumbers].push(Buffer.from(sequenceNumber.toBytesBE()));\n      } catch (err) {\n        const error = translateServiceBusError(err);\n        senderLogger.logError(\n          error,\n          `${this.logPrefix} An error occurred while encoding the item at position ${i} in the sequenceNumbers array`\n        );\n        throw error;\n      }\n    }\n\n    try {\n      messageBody[Constants.sequenceNumbers] = types.wrap_array(\n        messageBody[Constants.sequenceNumbers],\n        0x81,\n        undefined\n      );\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.cancelScheduledMessage\n        }\n      };\n\n      if (options?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] = options?.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      senderLogger.verbose(\n        \"%s Cancel scheduled messages request body: %O.\",\n        this.logPrefix,\n        request.body\n      );\n\n      await this._makeManagementRequest(request, senderLogger, options);\n      return;\n    } catch (err) {\n      const error = translateServiceBusError(err);\n      senderLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the request to cancel the scheduled message to $management endpoint`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Receives a list of deferred messages identified by `sequenceNumbers`.\n   *\n   * @param sequenceNumbers A list containing the sequence numbers to receive.\n   * @param receiveMode The mode in which the receiver was created.\n   * @returns Promise<ServiceBusMessage[]>\n   * - Returns a list of messages identified by the given sequenceNumbers.\n   * - Returns an empty list if no messages are found.\n   * - Throws an error if the messages have not been deferred.\n   */\n  async receiveDeferredMessages(\n    sequenceNumbers: Long[],\n    receiveMode: ReceiveMode,\n    sessionId?: string,\n    options?: OperationOptionsBase & SendManagementRequestOptions\n  ): Promise<ServiceBusMessageImpl[]> {\n    throwErrorIfConnectionClosed(this._context);\n\n    if (!sequenceNumbers.length) {\n      return [];\n    }\n\n    const messageList: ServiceBusMessageImpl[] = [];\n    const messageBody: any = {};\n    messageBody[Constants.sequenceNumbers] = [];\n    for (let i = 0; i < sequenceNumbers.length; i++) {\n      const sequenceNumber = sequenceNumbers[i];\n      try {\n        messageBody[Constants.sequenceNumbers].push(Buffer.from(sequenceNumber.toBytesBE()));\n      } catch (err) {\n        const error = translateServiceBusError(err);\n        receiverLogger.logError(\n          error,\n          `${this.logPrefix} An error occurred while encoding the item at position ${i} in the sequenceNumbers array`\n        );\n        throw error;\n      }\n    }\n\n    try {\n      messageBody[Constants.sequenceNumbers] = types.wrap_array(\n        messageBody[Constants.sequenceNumbers],\n        0x81,\n        undefined\n      );\n      const receiverSettleMode: number = receiveMode === \"receiveAndDelete\" ? 0 : 1;\n      messageBody[Constants.receiverSettleMode] = types.wrap_uint(receiverSettleMode);\n      if (sessionId != null) {\n        messageBody[Constants.sessionIdMapKey] = sessionId;\n      }\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.receiveBySequenceNumber\n        }\n      };\n      if (options?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] = options?.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      receiverLogger.verbose(\n        \"%s Receive deferred messages request body: %O.\",\n        this.logPrefix,\n        request.body\n      );\n\n      const result = await this._makeManagementRequest(request, receiverLogger, options);\n      const messages = result.body.messages as {\n        message: Buffer;\n        \"lock-token\": Buffer;\n      }[];\n      for (const msg of messages) {\n        const decodedMessage = RheaMessageUtil.decode(msg.message);\n        const message = new ServiceBusMessageImpl(\n          decodedMessage as any,\n          { tag: msg[\"lock-token\"] } as any,\n          false,\n          receiveMode\n        );\n        messageList.push(message);\n      }\n      return messageList;\n    } catch (err) {\n      const error = translateServiceBusError(err);\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the request to receive deferred messages to $management endpoint`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Updates the disposition status of deferred messages.\n   *\n   * @param lockTokens Message lock tokens to update disposition status.\n   * @param dispositionStatus The disposition status to be set\n   * @param options Optional parameters that can be provided while updating the disposition status.\n   *\n   * @returns Promise<void>\n   */\n  async updateDispositionStatus(\n    lockToken: string,\n    dispositionType: DispositionType,\n    options?: DispositionStatusOptions & SendManagementRequestOptions\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n    if (!options) options = {};\n    try {\n      let dispositionStatus: \"completed\" | \"defered\" | \"suspended\" | \"abandoned\";\n\n      if (dispositionType === DispositionType.abandon) dispositionStatus = \"abandoned\";\n      else if (dispositionType === DispositionType.complete) dispositionStatus = \"completed\";\n      else if (dispositionType === DispositionType.defer) dispositionStatus = \"defered\";\n      else if (dispositionType === DispositionType.deadletter) dispositionStatus = \"suspended\";\n      else throw new Error(`Provided \"dispositionType\" - ${dispositionType} is invalid`);\n\n      const messageBody: any = {};\n      const lockTokenBuffer: Buffer[] = [];\n      lockTokenBuffer.push(string_to_uuid(lockToken));\n      messageBody[Constants.lockTokens] = types.wrap_array(lockTokenBuffer, 0x98, undefined);\n      messageBody[Constants.dispositionStatus] = dispositionStatus;\n      if (options.deadLetterDescription != null) {\n        messageBody[Constants.deadLetterDescription] = options.deadLetterDescription;\n      }\n      if (options.deadLetterReason != null) {\n        messageBody[Constants.deadLetterReason] = options.deadLetterReason;\n      }\n      if (options.propertiesToModify != null) {\n        messageBody[Constants.propertiesToModify] = options.propertiesToModify;\n      }\n      if (options.sessionId != null) {\n        messageBody[Constants.sessionIdMapKey] = options.sessionId;\n      }\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.updateDisposition\n        }\n      };\n      if (options.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] = options.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      receiverLogger.verbose(\n        \"%s Update disposition status request body: %O.\",\n        this.logPrefix,\n        request.body\n      );\n      await this._makeManagementRequest(request, receiverLogger, options);\n    } catch (err) {\n      const error = translateServiceBusError(err);\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the request to update disposition status to $management endpoint`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Renews the lock for the specified session.\n   *\n   * @param sessionId Id of the session for which the lock needs to be renewed\n   * @param options Options that can be set while sending the request.\n   * @returns Promise<Date> New lock token expiry date and time in UTC format.\n   */\n  async renewSessionLock(\n    sessionId: string,\n    options?: OperationOptionsBase & SendManagementRequestOptions\n  ): Promise<Date> {\n    throwErrorIfConnectionClosed(this._context);\n    try {\n      const messageBody: any = {};\n      messageBody[Constants.sessionIdMapKey] = sessionId;\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.renewSessionLock\n        }\n      };\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      if (options?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] = options?.associatedLinkName;\n      }\n      receiverLogger.verbose(\n        \"%s Renew Session Lock request body: %O.\",\n        this.logPrefix,\n        request.body\n      );\n      const result = await this._makeManagementRequest(request, receiverLogger, options);\n      const lockedUntilUtc = new Date(result.body.expiration);\n      receiverLogger.verbose(\n        \"%s Lock for session '%s' will expire at %s.\",\n        this.logPrefix,\n        sessionId,\n        lockedUntilUtc.toString()\n      );\n      return lockedUntilUtc;\n    } catch (err) {\n      const error = translateServiceBusError(err);\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the renew lock request to $management endpoint`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Sets the state of the specified session.\n   *\n   * @param sessionId The session for which the state needs to be set\n   * @param state The state that needs to be set.\n   * @returns Promise<void>\n   */\n  async setSessionState(\n    sessionId: string,\n    state: any,\n    options?: OperationOptionsBase & SendManagementRequestOptions\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n\n    try {\n      const messageBody: any = {};\n      messageBody[Constants.sessionIdMapKey] = sessionId;\n      messageBody[\"session-state\"] = toBuffer(state);\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.setSessionState\n        }\n      };\n      if (options?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] = options?.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      receiverLogger.verbose(\n        \"%s Set Session state request body: %O.\",\n        this.logPrefix,\n        request.body\n      );\n      await this._makeManagementRequest(request, receiverLogger, options);\n    } catch (err) {\n      const error = translateServiceBusError(err);\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the renew lock request to $management endpoint`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Gets the state of the specified session.\n   *\n   * @param sessionId The session for which the state needs to be retrieved.\n   * @returns Promise<any> The state of that session\n   */\n  async getSessionState(\n    sessionId: string,\n    options?: OperationOptionsBase & SendManagementRequestOptions\n  ): Promise<any> {\n    throwErrorIfConnectionClosed(this._context);\n    try {\n      const messageBody: any = {};\n      messageBody[Constants.sessionIdMapKey] = sessionId;\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.getSessionState\n        }\n      };\n      if (options?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] = options?.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      receiverLogger.verbose(\n        \"%s Get session state request body: %O.\",\n        this.logPrefix,\n        request.body\n      );\n      const result = await this._makeManagementRequest(request, receiverLogger, options);\n      return result.body[\"session-state\"]\n        ? defaultDataTransformer.decode(result.body[\"session-state\"])\n        : result.body[\"session-state\"];\n    } catch (err) {\n      const error = translateServiceBusError(err);\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the renew lock request to $management endpoint`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Lists the sessions on the ServiceBus Queue/Topic.\n   * @param lastUpdateTime Filter to include only sessions updated after a given time.\n   * @param skip The number of sessions to skip\n   * @param top Maximum numer of sessions.\n   * @returns Promise<string[]> A list of session ids.\n   */\n  async listMessageSessions(\n    skip: number,\n    top: number,\n    lastUpdatedTime?: Date,\n    options?: OperationOptionsBase & SendManagementRequestOptions\n  ): Promise<string[]> {\n    throwErrorIfConnectionClosed(this._context);\n    const defaultLastUpdatedTimeForListingSessions: number = 259200000; // 3 * 24 * 3600 * 1000\n    if (typeof skip !== \"number\") {\n      throw new Error(\"'skip' is a required parameter and must be of type 'number'.\");\n    }\n    if (typeof top !== \"number\") {\n      throw new Error(\"'top' is a required parameter and must be of type 'number'.\");\n    }\n    if (lastUpdatedTime && !(lastUpdatedTime instanceof Date)) {\n      throw new Error(\"'lastUpdatedTime' must be of type 'Date'.\");\n    }\n    if (!lastUpdatedTime) {\n      lastUpdatedTime = new Date(Date.now() - defaultLastUpdatedTimeForListingSessions);\n    }\n    try {\n      const messageBody: any = {};\n      messageBody[\"last-updated-time\"] = lastUpdatedTime;\n      messageBody[\"skip\"] = types.wrap_int(skip);\n      messageBody[\"top\"] = types.wrap_int(top);\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.enumerateSessions\n        }\n      };\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      managementClientLogger.verbose(\n        \"%s List sessions request body: %O.\",\n        this.logPrefix,\n        request.body\n      );\n      const response = await this._makeManagementRequest(request, managementClientLogger, options);\n\n      return (response && response.body && response.body[\"sessions-ids\"]) || [];\n    } catch (err) {\n      const error = translateServiceBusError(err);\n      managementClientLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the renew lock request to $management endpoint`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get all the rules on the Subscription.\n   * @returns Promise<RuleDescription[]> A list of rules.\n   */\n  async getRules(\n    options?: OperationOptionsBase & SendManagementRequestOptions\n  ): Promise<RuleDescription[]> {\n    throwErrorIfConnectionClosed(this._context);\n    try {\n      const request: RheaMessage = {\n        body: {\n          top: types.wrap_int(max32BitNumber),\n          skip: types.wrap_int(0)\n        },\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.enumerateRules\n        }\n      };\n      request.application_properties![Constants.trackingId] = generate_uuid();\n\n      managementClientLogger.verbose(\n        \"%s Get rules request body: %O.\",\n        this.logPrefix,\n        request.body\n      );\n      const response = await this._makeManagementRequest(request, managementClientLogger, options);\n      if (\n        response.application_properties!.statusCode === 204 ||\n        !response.body ||\n        !Array.isArray(response.body.rules)\n      ) {\n        return [];\n      }\n\n      // Reference: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-amqp-request-response#response-11\n      const result: { \"rule-description\": Typed }[] = response.body.rules || [];\n      const rules: RuleDescription[] = [];\n      result.forEach((x) => {\n        const ruleDescriptor = x[\"rule-description\"];\n\n        // We use the first three elements of the `ruleDescriptor.value` to get filter, action, name\n        if (\n          !ruleDescriptor ||\n          !ruleDescriptor.descriptor ||\n          ruleDescriptor.descriptor.value !== Constants.descriptorCodes.ruleDescriptionList ||\n          !Array.isArray(ruleDescriptor.value) ||\n          ruleDescriptor.value.length < 3\n        ) {\n          return;\n        }\n\n        const filtersRawData: Typed = ruleDescriptor.value[0];\n        const actionsRawData: Typed = ruleDescriptor.value[1];\n        const rule: RuleDescription = {\n          name: ruleDescriptor.value[2].value\n        };\n\n        switch (filtersRawData.descriptor.value) {\n          case Constants.descriptorCodes.trueFilterList:\n            rule.filter = \"1=1\";\n            break;\n          case Constants.descriptorCodes.falseFilterList:\n            rule.filter = \"1=0\";\n            break;\n          case Constants.descriptorCodes.sqlFilterList:\n            rule.filter = this._safelyGetTypedValueFromArray(filtersRawData.value, 0);\n            break;\n          case Constants.descriptorCodes.correlationFilterList:\n            rule.filter = {\n              correlationId: this._safelyGetTypedValueFromArray(filtersRawData.value, 0),\n              messageId: this._safelyGetTypedValueFromArray(filtersRawData.value, 1),\n              to: this._safelyGetTypedValueFromArray(filtersRawData.value, 2),\n              replyTo: this._safelyGetTypedValueFromArray(filtersRawData.value, 3),\n              subject: this._safelyGetTypedValueFromArray(filtersRawData.value, 4),\n              sessionId: this._safelyGetTypedValueFromArray(filtersRawData.value, 5),\n              replyToSessionId: this._safelyGetTypedValueFromArray(filtersRawData.value, 6),\n              contentType: this._safelyGetTypedValueFromArray(filtersRawData.value, 7),\n              applicationProperties: this._safelyGetTypedValueFromArray(filtersRawData.value, 8)\n            };\n            break;\n          default:\n            managementClientLogger.warning(\n              `${this.logPrefix} Found unexpected descriptor code for the filter: ${filtersRawData.descriptor.value}`\n            );\n            break;\n        }\n\n        if (\n          actionsRawData.descriptor.value === Constants.descriptorCodes.sqlRuleActionList &&\n          Array.isArray(actionsRawData.value) &&\n          actionsRawData.value.length\n        ) {\n          rule.action = this._safelyGetTypedValueFromArray(actionsRawData.value, 0);\n        }\n\n        rules.push(rule);\n      });\n\n      return rules;\n    } catch (err) {\n      const error = translateServiceBusError(err);\n      managementClientLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the get rules request to $management endpoint`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Removes the rule on the Subscription identified by the given rule name.\n   * @param ruleName\n   */\n  async removeRule(\n    ruleName: string,\n    options?: OperationOptionsBase & SendManagementRequestOptions\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n    throwTypeErrorIfParameterMissing(this._context.connectionId, \"ruleName\", ruleName);\n    ruleName = String(ruleName);\n    throwTypeErrorIfParameterIsEmptyString(this._context.connectionId, \"ruleName\", ruleName);\n\n    try {\n      const request: RheaMessage = {\n        body: {\n          \"rule-name\": types.wrap_string(ruleName)\n        },\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.removeRule\n        }\n      };\n      request.application_properties![Constants.trackingId] = generate_uuid();\n\n      managementClientLogger.verbose(\n        \"%s Remove Rule request body: %O.\",\n        this.logPrefix,\n        request.body\n      );\n      await this._makeManagementRequest(request, managementClientLogger, options);\n    } catch (err) {\n      const error = translateServiceBusError(err);\n      managementClientLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the remove rule request to $management endpoint`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Adds a rule on the subscription as defined by the given rule name, filter and action\n   * @param ruleName Name of the rule\n   * @param filter A Boolean, SQL expression or a Correlation filter\n   * @param sqlRuleActionExpression Action to perform if the message satisfies the filtering expression\n   */\n  async addRule(\n    ruleName: string,\n    filter: boolean | string | CorrelationRuleFilter,\n    sqlRuleActionExpression?: string,\n    options?: OperationOptionsBase & SendManagementRequestOptions\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n\n    throwTypeErrorIfParameterMissing(this._context.connectionId, \"ruleName\", ruleName);\n    ruleName = String(ruleName);\n    throwTypeErrorIfParameterIsEmptyString(this._context.connectionId, \"ruleName\", ruleName);\n\n    throwTypeErrorIfParameterMissing(this._context.connectionId, \"filter\", filter);\n    if (\n      typeof filter !== \"boolean\" &&\n      typeof filter !== \"string\" &&\n      !correlationProperties.some((validProperty) => filter.hasOwnProperty(validProperty))\n    ) {\n      throw new TypeError(\n        `The parameter \"filter\" should be either a boolean, string or implement the CorrelationRuleFilter interface.`\n      );\n    }\n\n    try {\n      const ruleDescription: any = {};\n      switch (typeof filter) {\n        case \"boolean\":\n          ruleDescription[\"sql-filter\"] = {\n            expression: filter ? \"1=1\" : \"1=0\"\n          };\n          break;\n        case \"string\":\n          ruleDescription[\"sql-filter\"] = {\n            expression: filter\n          };\n          break;\n        default:\n          ruleDescription[\"correlation-filter\"] = {\n            \"correlation-id\": filter.correlationId,\n            \"message-id\": filter.messageId,\n            to: filter.to,\n            \"reply-to\": filter.replyTo,\n            subject: filter.subject,\n            \"session-id\": filter.sessionId,\n            \"reply-to-session-id\": filter.replyToSessionId,\n            \"content-type\": filter.contentType,\n            applicationProperties: filter.applicationProperties\n          };\n          break;\n      }\n\n      if (sqlRuleActionExpression !== undefined) {\n        ruleDescription[\"sql-rule-action\"] = {\n          expression: String(sqlRuleActionExpression)\n        };\n      }\n      const request: RheaMessage = {\n        body: {\n          \"rule-name\": types.wrap_string(ruleName),\n          \"rule-description\": types.wrap_map(ruleDescription)\n        },\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.addRule\n        }\n      };\n      request.application_properties![Constants.trackingId] = generate_uuid();\n\n      managementClientLogger.verbose(\"%s Add Rule request body: %O.\", this.logPrefix, request.body);\n      await this._makeManagementRequest(request, managementClientLogger, options);\n    } catch (err) {\n      const error = translateServiceBusError(err);\n      managementClientLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the Add rule request to $management endpoint`\n      );\n      throw error;\n    }\n  }\n}\n"]}