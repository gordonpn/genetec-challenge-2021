{"version":3,"file":"receiverHelper.js","sourceRoot":"","sources":["../../../src/core/receiverHelper.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAY,cAAc,EAAE,MAAM,cAAc,CAAC;AACxD,OAAO,EAAE,cAAc,IAAI,MAAM,EAAE,MAAM,QAAQ,CAAC;AAElD;;;;;;GAMG;AACH,MAAM,OAAO,cAAc;IAGzB,YACU,mBAAgF;QAAhF,wBAAmB,GAAnB,mBAAmB,CAA6D;QAHlF,iBAAY,GAAY,KAAK,CAAC;IAInC,CAAC;IAEJ;;;;;;;;OAQG;IACH,SAAS,CAAC,OAAe;QACvB,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAE3D,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE;YAC9B,MAAM,CAAC,OAAO,CACZ,GAAG,SAAS,iBAAiB,OAAO,2DAA2D,CAChG,CAAC;YACF,OAAO,KAAK,CAAC;SACd;QAED,IAAI,QAAQ,IAAI,IAAI,EAAE;YACpB,MAAM,CAAC,OAAO,CAAC,GAAG,SAAS,WAAW,OAAO,UAAU,CAAC,CAAC;YACzD,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SAC7B;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACG,OAAO;;YACX,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAE3D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YAEzB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE;gBACpC,OAAO;aACR;YAED,MAAM,CAAC,OAAO,CACZ,GAAG,SAAS,0EAA0E,CACvF,CAAC;YACF,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;QACtB,CAAC;KAAA;IAED;;OAEG;IACH,MAAM;QACJ,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC5B,CAAC;IAED;;;;;;OAMG;IACH,kBAAkB;QAChB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAChD,OAAO,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC/D,CAAC;IAED;;;OAGG;IACG,KAAK;;YACT,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAE3D,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE;gBACpC,OAAO;aACR;YAED,MAAM,CAAC,OAAO,CACZ,GAAG,SAAS,mDAAmD,QAAQ,CAAC,MAAM,EAAE,CACjF,CAAC;YAEF,MAAM,YAAY,GAAG,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;gBACjD,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,GAAG,EAAE;oBACjD,MAAM,CAAC,OAAO,CAAC,GAAG,SAAS,6BAA6B,CAAC,CAAC;oBAC1D,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;oBACvB,OAAO,EAAE,CAAC;gBACZ,CAAC,CAAC,CAAC;gBAEH,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC;gBACtB,0DAA0D;gBAC1D,iCAAiC;gBACjC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;YAEH,OAAO,YAAY,CAAC;QACtB,CAAC;KAAA;IAEO,gBAAgB,CAAC,QAA8B;QACrD,OAAO,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;IAC/C,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Receiver, ReceiverEvents } from \"rhea-promise\";\nimport { receiverLogger as logger } from \"../log\";\n\n/**\n * Wraps the receiver with some higher level operations for managing state\n * like credits, draining, etc...\n *\n * @internal\n * @hidden\n */\nexport class ReceiverHelper {\n  private _isSuspended: boolean = false;\n\n  constructor(\n    private _getCurrentReceiver: () => { receiver: Receiver | undefined; logPrefix: string }\n  ) {}\n\n  /**\n   * Adds credits to the receiver, respecting any state that\n   * indicates the receiver is closed or should not continue\n   * to receive more messages.\n   *\n   * @param credits Number of credits to add.\n   * @returns true if credits were added, false if there is no current receiver instance\n   * or `stopReceivingMessages` has been called.\n   */\n  addCredit(credits: number): boolean {\n    const { receiver, logPrefix } = this._getCurrentReceiver();\n\n    if (!this.canReceiveMessages()) {\n      logger.verbose(\n        `${logPrefix} Asked to add ${credits} credits but the receiver is not able to receive messages`\n      );\n      return false;\n    }\n\n    if (receiver != null) {\n      logger.verbose(`${logPrefix} Adding ${credits} credits`);\n      receiver.addCredit(credits);\n    }\n\n    return true;\n  }\n\n  /**\n   * Drains the credits for the receiver and prevents the `receiverHelper.addCredit()` method from adding credits.\n   * Call `resume()` to enable the `addCredit()` method.\n   */\n  async suspend(): Promise<void> {\n    const { receiver, logPrefix } = this._getCurrentReceiver();\n\n    this._isSuspended = true;\n\n    if (!this._isValidReceiver(receiver)) {\n      return;\n    }\n\n    logger.verbose(\n      `${logPrefix} User has requested to stop receiving new messages, attempting to drain.`\n    );\n    return this.drain();\n  }\n\n  /**\n   * Resets tracking so `addCredit` works again.\n   */\n  resume(): void {\n    this._isSuspended = false;\n  }\n\n  /**\n   * Whether the receiver can receive messages.\n   *\n   * This checks if the the caller has decided to disable adding\n   * credits via 'suspend' as well as whether the receiver itself is\n   * still open.\n   */\n  canReceiveMessages(): boolean {\n    const { receiver } = this._getCurrentReceiver();\n    return !this._isSuspended && this._isValidReceiver(receiver);\n  }\n\n  /**\n   * Initiates a drain for the current receiver and resolves when\n   * the drain has completed.\n   */\n  async drain(): Promise<void> {\n    const { receiver, logPrefix } = this._getCurrentReceiver();\n\n    if (!this._isValidReceiver(receiver)) {\n      return;\n    }\n\n    logger.verbose(\n      `${logPrefix} Receiver is starting drain. Remaining credits; ${receiver.credit}`\n    );\n\n    const drainPromise = new Promise<void>((resolve) => {\n      receiver.once(ReceiverEvents.receiverDrained, () => {\n        logger.verbose(`${logPrefix} Receiver has been drained.`);\n        receiver.drain = false;\n        resolve();\n      });\n\n      receiver.drain = true;\n      // this is not actually adding another credit - it'll just\n      // cause the drain call to start.\n      receiver.addCredit(1);\n    });\n\n    return drainPromise;\n  }\n\n  private _isValidReceiver(receiver: Receiver | undefined): receiver is Receiver {\n    return receiver != null && receiver.isOpen();\n  }\n}\n"]}