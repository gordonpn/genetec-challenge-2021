{"version":3,"file":"serviceBusMessage.js","sourceRoot":"","sources":["../../src/serviceBusMessage.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AmqpAnnotatedMessage, Constants } from \"@azure/core-amqp\";\nimport { Buffer } from \"buffer\";\nimport Long from \"long\";\nimport {\n  Delivery,\n  DeliveryAnnotations,\n  MessageAnnotations,\n  uuid_to_string,\n  Message as RheaMessage\n} from \"rhea-promise\";\nimport { defaultDataTransformer } from \"./dataTransformer\";\nimport { messageLogger as logger } from \"./log\";\nimport { ReceiveMode } from \"./models\";\nimport { reorderLockToken } from \"./util/utils\";\n\n/**\n * @internal\n * @hidden\n */\nexport enum DispositionType {\n  complete = \"complete\",\n  deadletter = \"deadletter\",\n  abandon = \"abandon\",\n  defer = \"defer\"\n}\n\n/**\n * @internal\n * @hidden\n * Describes the delivery annotations for Service Bus.\n */\nexport interface ServiceBusDeliveryAnnotations extends DeliveryAnnotations {\n  /**\n   * @property {string} [last_enqueued_offset] The offset of the last event.\n   */\n  last_enqueued_offset?: string;\n  /**\n   * @property {number} [last_enqueued_sequence_number] The sequence number of the last event.\n   */\n  last_enqueued_sequence_number?: number;\n  /**\n   * @property {number} [last_enqueued_time_utc] The enqueued time of the last event.\n   */\n  last_enqueued_time_utc?: number;\n  /**\n   * @property {number} [runtime_info_retrieval_time_utc] The retrieval time of the last event.\n   */\n  runtime_info_retrieval_time_utc?: number;\n  /**\n   * @property {string} Any unknown delivery annotations.\n   */\n  [x: string]: any;\n}\n\n/**\n * @internal\n * @hidden\n * Describes the message annotations for Service Bus.\n */\nexport interface ServiceBusMessageAnnotations extends MessageAnnotations {\n  /**\n   * @property {string | null} [x-opt-partition-key] Annotation for the partition key set for the event.\n   */\n  \"x-opt-partition-key\"?: string | null;\n  /**\n   * @property {number} [x-opt-sequence-number] Annontation for the sequence number of the event.\n   */\n  \"x-opt-sequence-number\"?: number;\n  /**\n   * @property {number} [x-opt-enqueued-time] Annotation for the enqueued time of the event.\n   */\n  \"x-opt-enqueued-time\"?: number;\n  /**\n   * @property {string} [x-opt-offset] Annotation for the offset of the event.\n   */\n  \"x-opt-offset\"?: string;\n  /**\n   * @property {string} [x-opt-locked-until] Annotation for the message being locked until.\n   */\n  \"x-opt-locked-until\"?: Date | number;\n}\n\n/**\n * Describes the reason and error description for dead lettering a message using the `deadLetter()`\n * method on the message received from Service Bus.\n */\nexport interface DeadLetterOptions {\n  /**\n   * @property The reason for deadlettering the message.\n   */\n  deadLetterReason: string;\n  /**\n   * @property The error description for deadlettering the message.\n   */\n  deadLetterErrorDescription: string;\n}\n\n/**\n * Describes the message to be sent to Service Bus.\n */\nexport interface ServiceBusMessage {\n  /**\n   * @property The message body that needs to be sent or is received.\n   * If the application receiving the message is not using this SDK,\n   * convert your body payload to a byte array or Buffer for better\n   * cross-language compatibility.\n   */\n  body: any;\n  /**\n   * @property The message identifier is an\n   * application-defined value that uniquely identifies the message and its payload.\n   *\n   * Note: Numbers that are not whole integers are not allowed.\n   */\n  messageId?: string | number | Buffer;\n  /**\n   * @property The content type of the message. Optionally describes\n   * the payload of the message, with a descriptor following the format of RFC2045, Section 5, for\n   * example \"application/json\".\n   */\n  contentType?: string;\n  /**\n   * @property The correlation identifier that allows an\n   * application to specify a context for the message for the purposes of correlation, for example\n   * reflecting the MessageId of a message that is being replied to.\n   * See {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation Message Routing and Correlation}.\n   */\n  correlationId?: string | number | Buffer;\n  /**\n   * @property The partition key for sending a message to a partitioned entity.\n   * Maximum length is 128 characters. For {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-partitioning partitioned entities},\n   * setting this value enables assigning related messages to the same internal partition,\n   * so that submission sequence order is correctly recorded. The partition is chosen by a hash\n   * function over this value and cannot be chosen directly.\n   * - For session-aware entities, the `sessionId` property overrides this value.\n   * - For non partitioned entities, partition key will be ignored\n   *\n   */\n  partitionKey?: string;\n  /**\n   * @property The partition key for sending a message into an entity\n   * via a partitioned transfer queue. Maximum length is 128 characters. If a message is sent via a\n   * transfer queue in the scope of a transaction, this value selects the transfer queue partition:\n   * This is functionally equivalent to `partitionKey` property and ensures that messages are kept\n   * together and in order as they are transferred.\n   * See {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-transactions#transfers-and-send-via Transfers and Send Via}.\n   */\n\n  // Will be required later for implementing Transactions\n  // viaPartitionKey?: string;\n\n  /**\n   * @property The session identifier for a session-aware entity. Maximum\n   * length is 128 characters. For session-aware entities, this application-defined value specifies\n   * the session affiliation of the message. Messages with the same session identifier are subject\n   * to summary locking and enable exact in-order processing and demultiplexing. For\n   * session-unaware entities, this value is ignored.\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/message-sessions Message Sessions}.\n   */\n  sessionId?: string;\n  /**\n   * @property The session identifier augmenting the `replyTo` address.\n   * Maximum length is 128 characters. This value augments the ReplyTo information and specifies\n   * which SessionId should be set for the reply when sent to the reply entity.\n   * See {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation Message Routing and Correlation}.\n   */\n  replyToSessionId?: string;\n  /**\n   * @property The message’s time to live value. This value is the relative\n   * duration after which the message expires, starting from the instant the message has been\n   * accepted and stored by the broker, as captured in `enqueuedTimeUtc`. When not set explicitly,\n   * the assumed value is the DefaultTimeToLive for the respective queue or topic. A message-level\n   * `timeToLive` value cannot be longer than the entity's DefaultTimeToLive setting and it is\n   * silently adjusted if it does. See\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/message-expiration Expiration}.\n   */\n  timeToLive?: number;\n  /**\n   * @property The application specific label. This property enables the\n   * application to indicate the purpose of the message to the receiver in a standardized. fashion,\n   * similar to an email subject line. The mapped AMQP property is \"subject\".\n   */\n  subject?: string;\n  /**\n   * @property The \"to\" address. This property is reserved for future use in routing\n   * scenarios and presently ignored by the broker itself. Applications can use this value in\n   * rule-driven {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-auto-forwarding auto-forward chaining}\n   * scenarios to indicate the intended logical destination of the message.\n   */\n  to?: string;\n  /**\n   * @property The address of an entity to send replies to. This optional and\n   * application-defined value is a standard way to express a reply path to the receiver of the\n   * message. When a sender expects a reply, it sets the value to the absolute or relative path of\n   * the queue or topic it expects the reply to be sent to. See\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation Message Routing and Correlation}.\n   */\n  replyTo?: string;\n  /**\n   * @property The date and time in UTC at which the message will\n   * be enqueued. This property returns the time in UTC; when setting the property, the\n   * supplied DateTime value must also be in UTC. This value is for delayed message sending.\n   * It is utilized to delay messages sending to a specific time in the future. Message enqueuing\n   * time does not mean that the message will be sent at the same time. It will get enqueued,\n   * but the actual sending time depends on the queue's workload and its state.\n   */\n  scheduledEnqueueTimeUtc?: Date;\n  /**\n   * @property The application specific properties which can be\n   * used for custom message metadata.\n   */\n  applicationProperties?: { [key: string]: number | boolean | string | Date };\n}\n\n/**\n * @internal\n * @hidden\n * Gets the error message for when a property on given message is not of expected type\n */\nexport function getMessagePropertyTypeMismatchError(msg: ServiceBusMessage): Error | undefined {\n  if (msg.contentType != null && typeof msg.contentType !== \"string\") {\n    return new TypeError(\"The property 'contentType' on the message must be of type 'string'\");\n  }\n\n  if (msg.subject != null && typeof msg.subject !== \"string\") {\n    return new TypeError(\"The property 'label' on the message must be of type 'string'\");\n  }\n\n  if (msg.to != null && typeof msg.to !== \"string\") {\n    return new TypeError(\"The property 'to' on the message must be of type 'string'\");\n  }\n\n  if (msg.replyTo != null && typeof msg.replyTo !== \"string\") {\n    return new TypeError(\"The property 'replyTo' on the message must be of type 'string'\");\n  }\n\n  if (msg.replyToSessionId != null && typeof msg.replyToSessionId !== \"string\") {\n    return new TypeError(\"The property 'replyToSessionId' on the message must be of type 'string'\");\n  }\n\n  if (msg.timeToLive != null && typeof msg.timeToLive !== \"number\") {\n    return new TypeError(\"The property 'timeToLive' on the message must be of type 'number'\");\n  }\n\n  if (msg.sessionId != null && typeof msg.sessionId !== \"string\") {\n    return new TypeError(\"The property 'sessionId' on the message must be of type 'string'\");\n  }\n\n  if (\n    msg.messageId != null &&\n    typeof msg.messageId !== \"string\" &&\n    typeof msg.messageId !== \"number\" &&\n    !Buffer.isBuffer(msg.messageId)\n  ) {\n    return new TypeError(\n      \"The property 'messageId' on the message must be of type string, number or Buffer\"\n    );\n  }\n\n  if (\n    msg.correlationId != null &&\n    typeof msg.correlationId !== \"string\" &&\n    typeof msg.correlationId !== \"number\" &&\n    !Buffer.isBuffer(msg.correlationId)\n  ) {\n    return new TypeError(\n      \"The property 'correlationId' on the message must be of type string, number or Buffer\"\n    );\n  }\n  return;\n}\n\n/**\n * @internal\n * @hidden\n * Converts given ServiceBusMessage to RheaMessage\n */\nexport function toRheaMessage(msg: ServiceBusMessage): RheaMessage {\n  const amqpMsg: RheaMessage = {\n    body: msg.body,\n    message_annotations: {}\n  };\n  if (msg.applicationProperties != null) {\n    amqpMsg.application_properties = msg.applicationProperties;\n  }\n  if (msg.contentType != null) {\n    amqpMsg.content_type = msg.contentType;\n  }\n  if (msg.sessionId != null) {\n    if (msg.sessionId.length > Constants.maxSessionIdLength) {\n      throw new Error(\n        \"Length of 'sessionId' property on the message cannot be greater than 128 characters.\"\n      );\n    }\n    amqpMsg.group_id = msg.sessionId;\n  }\n  if (msg.replyTo != null) {\n    amqpMsg.reply_to = msg.replyTo;\n  }\n  if (msg.to != null) {\n    amqpMsg.to = msg.to;\n  }\n  if (msg.subject != null) {\n    amqpMsg.subject = msg.subject;\n  }\n  if (msg.messageId != null) {\n    if (typeof msg.messageId === \"string\" && msg.messageId.length > Constants.maxMessageIdLength) {\n      throw new Error(\n        \"Length of 'messageId' property on the message cannot be greater than 128 characters.\"\n      );\n    }\n    amqpMsg.message_id = msg.messageId;\n  }\n  if (msg.correlationId != null) {\n    amqpMsg.correlation_id = msg.correlationId;\n  }\n  if (msg.replyToSessionId != null) {\n    amqpMsg.reply_to_group_id = msg.replyToSessionId;\n  }\n  if (msg.timeToLive != null && msg.timeToLive !== Constants.maxDurationValue) {\n    amqpMsg.ttl = msg.timeToLive;\n    amqpMsg.creation_time = Date.now();\n    if (Constants.maxAbsoluteExpiryTime - amqpMsg.creation_time > amqpMsg.ttl) {\n      amqpMsg.absolute_expiry_time = amqpMsg.creation_time + amqpMsg.ttl;\n    } else {\n      amqpMsg.absolute_expiry_time = Constants.maxAbsoluteExpiryTime;\n    }\n  }\n  if (msg.partitionKey != null) {\n    if (msg.partitionKey.length > Constants.maxPartitionKeyLength) {\n      throw new Error(\n        \"Length of 'partitionKey' property on the message cannot be greater than 128 characters.\"\n      );\n    }\n    amqpMsg.message_annotations![Constants.partitionKey] = msg.partitionKey;\n  }\n\n  // Will be required later for implementing Transactions\n  // if (msg.viaPartitionKey != null) {\n  //   if (msg.viaPartitionKey.length > Constants.maxPartitionKeyLength) {\n  //     throw new Error(\n  //       \"Length of 'viaPartitionKey' property on the message cannot be greater than 128 characters.\"\n  //     );\n  //   }\n  //   amqpMsg.message_annotations![Constants.viaPartitionKey] = msg.viaPartitionKey;\n  // }\n\n  if (msg.scheduledEnqueueTimeUtc != null) {\n    amqpMsg.message_annotations![Constants.scheduledEnqueueTime] = msg.scheduledEnqueueTimeUtc;\n  }\n\n  logger.verbose(\"SBMessage to RheaMessage: %O\", amqpMsg);\n  return amqpMsg;\n}\n\n/**\n * Describes the message received from Service Bus during peek operations and so cannot be settled.\n * @class ServiceBusReceivedMessage\n */\nexport interface ServiceBusReceivedMessage extends ServiceBusMessage {\n  /**\n   * @property The reason for deadlettering the message.\n   * @readonly\n   */\n  readonly deadLetterReason?: string;\n  /**\n   * @property The error description for deadlettering the message.\n   * @readonly\n   */\n  readonly deadLetterErrorDescription?: string;\n  /**\n   * @property The lock token is a reference to the lock that is being held by the broker in\n   * `peekLock` receive mode. Locks are used internally settle messages as explained in the\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement product documentation in more detail}\n   * - Not applicable when the message is received in `receiveAndDelete` receive mode.\n   * mode.\n   * @readonly\n   */\n  readonly lockToken?: string;\n  /**\n   * @property Number of deliveries that have been attempted for this message. The count is\n   * incremented when a message lock expires, or the message is explicitly abandoned using the\n   * `abandon()` method on the message.\n   * @readonly\n   */\n  readonly deliveryCount?: number;\n  /**\n   * @property The UTC instant at which the message has been accepted and stored in Service Bus.\n   * @readonly\n   */\n  readonly enqueuedTimeUtc?: Date;\n  /**\n   * @property The UTC instant at which the message is marked for removal and no longer available for\n   * retrieval from the entity due to expiration. This property is computed from 2 other properties\n   * on the message: `enqueuedTimeUtc` + `timeToLive`.\n   */\n  readonly expiresAtUtc?: Date;\n  /**\n   * @property The UTC instant until which the message is held locked in the queue/subscription.\n   * When the lock expires, the `deliveryCount` is incremented and the message is again available\n   * for retrieval.\n   * - Not applicable when the message is received in `receiveAndDelete` receive mode.\n   * mode.\n   */\n  lockedUntilUtc?: Date;\n  /**\n   * @property The original sequence number of the message. For\n   * messages that have been auto-forwarded, this property reflects the sequence number that had\n   * first been assigned to the message at its original point of submission.\n   * @readonly\n   */\n  readonly enqueuedSequenceNumber?: number;\n  /**\n   * @property The unique number assigned to a message by Service Bus.\n   * The sequence number is a unique 64-bit integer assigned to a message as it is accepted\n   * and stored by the broker and functions as its true identifier. For partitioned entities,\n   * the topmost 16 bits reflect the partition identifier. Sequence numbers monotonically increase.\n   * They roll over to 0 when the 48-64 bit range is exhausted.\n   *\n   * **Max safe integer** that Javascript currently supports is `2^53 - 1`. The sequence number\n   * is an AMQP `Long` type which can be upto 64 bits long. To represent that we are using a\n   * library named {@link https://github.com/dcodeIO/long.js long.js}. We expect customers\n   * to use the **`Long`** type exported by this library.\n   * @readonly\n   */\n  readonly sequenceNumber?: Long;\n  /**\n   * @property The name of the queue or subscription that this message\n   * was enqueued on, before it was deadlettered. Only set in messages that have been dead-lettered\n   * and subsequently auto-forwarded from the dead-letter sub-queue to another entity. Indicates the\n   * entity in which the message was dead-lettered.\n   * @readonly\n   */\n  readonly deadLetterSource?: string;\n  /**\n   * @property The underlying raw amqp message.\n   * @readonly\n   */\n  readonly _rawAmqpMessage: AmqpAnnotatedMessage;\n}\n\n/**\n * @internal\n * @hidden\n * Converts given RheaMessage to ServiceBusReceivedMessage\n */\nexport function fromRheaMessage(\n  msg: RheaMessage,\n  delivery?: Delivery,\n  shouldReorderLockToken?: boolean\n): ServiceBusReceivedMessage {\n  if (!msg) {\n    msg = {\n      body: undefined\n    };\n  }\n  const sbmsg: ServiceBusMessage = {\n    body: msg.body\n  };\n\n  if (msg.application_properties != null) {\n    sbmsg.applicationProperties = msg.application_properties;\n  }\n  if (msg.content_type != null) {\n    sbmsg.contentType = msg.content_type;\n  }\n  if (msg.group_id != null) {\n    sbmsg.sessionId = msg.group_id;\n  }\n  if (msg.reply_to != null) {\n    sbmsg.replyTo = msg.reply_to;\n  }\n  if (msg.to != null) {\n    sbmsg.to = msg.to;\n  }\n  if (msg.ttl != null) {\n    sbmsg.timeToLive = msg.ttl;\n  }\n  if (msg.subject != null) {\n    sbmsg.subject = msg.subject;\n  }\n  if (msg.message_id != null) {\n    sbmsg.messageId = msg.message_id;\n  }\n  if (msg.correlation_id != null) {\n    sbmsg.correlationId = msg.correlation_id;\n  }\n  if (msg.reply_to_group_id != null) {\n    sbmsg.replyToSessionId = msg.reply_to_group_id;\n  }\n\n  if (msg.message_annotations != null) {\n    if (msg.message_annotations[Constants.partitionKey] != null) {\n      sbmsg.partitionKey = msg.message_annotations[Constants.partitionKey];\n    }\n\n    // Will be required later for implementing Transactions\n    // if (msg.message_annotations[Constants.viaPartitionKey] != null) {\n    //   sbmsg.viaPartitionKey = msg.message_annotations[Constants.viaPartitionKey];\n    // }\n\n    if (msg.message_annotations[Constants.scheduledEnqueueTime] != null) {\n      sbmsg.scheduledEnqueueTimeUtc = msg.message_annotations[Constants.scheduledEnqueueTime];\n    }\n  }\n\n  const props: any = {};\n  if (msg.message_annotations != null) {\n    if (msg.message_annotations[Constants.deadLetterSource] != null) {\n      props.deadLetterSource = msg.message_annotations[Constants.deadLetterSource];\n    }\n    if (msg.message_annotations[Constants.enqueueSequenceNumber] != null) {\n      props.enqueuedSequenceNumber = msg.message_annotations[Constants.enqueueSequenceNumber];\n    }\n    if (msg.message_annotations[Constants.sequenceNumber] != null) {\n      if (Buffer.isBuffer(msg.message_annotations[Constants.sequenceNumber])) {\n        props.sequenceNumber = Long.fromBytesBE(msg.message_annotations[Constants.sequenceNumber]);\n      } else {\n        props.sequenceNumber = Long.fromNumber(msg.message_annotations[Constants.sequenceNumber]);\n      }\n    }\n    if (msg.message_annotations[Constants.enqueuedTime] != null) {\n      props.enqueuedTimeUtc = new Date(msg.message_annotations[Constants.enqueuedTime] as number);\n    }\n    if (msg.message_annotations[Constants.lockedUntil] != null) {\n      props.lockedUntilUtc = new Date(msg.message_annotations[Constants.lockedUntil] as number);\n    }\n  }\n  if (msg.ttl != null && msg.ttl >= Constants.maxDurationValue - props.enqueuedTimeUtc.getTime()) {\n    props.expiresAtUtc = new Date(Constants.maxDurationValue);\n  } else {\n    props.expiresAtUtc = new Date(props.enqueuedTimeUtc.getTime() + msg.ttl!);\n  }\n\n  const rcvdsbmsg: ServiceBusReceivedMessage = {\n    _rawAmqpMessage: AmqpAnnotatedMessage.fromRheaMessage(msg),\n    _delivery: delivery,\n    deliveryCount: msg.delivery_count,\n    lockToken:\n      delivery && delivery.tag && delivery.tag.length !== 0\n        ? uuid_to_string(\n            shouldReorderLockToken === true\n              ? reorderLockToken(\n                  typeof delivery.tag === \"string\" ? Buffer.from(delivery.tag) : delivery.tag\n                )\n              : typeof delivery.tag === \"string\"\n              ? Buffer.from(delivery.tag)\n              : delivery.tag\n          )\n        : undefined,\n    ...sbmsg,\n    ...props,\n    deadLetterReason: sbmsg.applicationProperties?.DeadLetterReason,\n    deadLetterErrorDescription: sbmsg.applicationProperties?.DeadLetterErrorDescription\n  };\n\n  logger.verbose(\"AmqpMessage to ServiceBusReceivedMessage: %O\", rcvdsbmsg);\n  return rcvdsbmsg;\n}\n\n/**\n * @internal\n * @hidden\n */\nexport function isServiceBusMessage(possible: any): possible is ServiceBusMessage {\n  return possible != null && typeof possible === \"object\" && \"body\" in possible;\n}\n\n/**\n * Describes the message received from Service Bus.\n *\n * @internal\n * @hidden\n * @class ServiceBusMessageImpl\n * @implements {ServiceBusReceivedMessage}\n */\nexport class ServiceBusMessageImpl implements ServiceBusReceivedMessage {\n  /**\n   * @property The message body that needs to be sent or is received.\n   */\n  body: any;\n  /**\n   * @property The application specific properties.\n   */\n  applicationProperties?: { [key: string]: any };\n  /**\n   * @property The message identifier is an\n   * application-defined value that uniquely identifies the message and its payload. The identifier\n   * is a free-form string and can reflect a GUID or an identifier derived from the application\n   * context. If enabled, the\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/duplicate-detection duplicate detection}\n   * identifies and removes second and further submissions of messages with the same MessageId.\n   */\n  messageId?: string | number | Buffer;\n  /**\n   * @property The content type of the message. Optionally describes\n   * the payload of the message, with a descriptor following the format of RFC2045, Section 5, for\n   * example \"application/json\".\n   */\n  contentType?: string;\n  /**\n   * @property The correlation identifier that allows an\n   * application to specify a context for the message for the purposes of correlation, for example\n   * reflecting the MessageId of a message that is being replied to.\n   * See {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation Message Routing and Correlation}.\n   */\n  correlationId?: string | number | Buffer;\n  /**\n   * @property The partition key for sending a message to a\n   * partitioned entity. Maximum length is 128 characters. For {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-partitioning partitioned entities},\n   * setting this value enables assigning related messages to the same internal partition,\n   * so that submission sequence order is correctly recorded. The partition is chosen by a hash\n   * function over this value and cannot be chosen directly. For session-aware entities,\n   * the `sessionId` property overrides this value.\n   */\n  partitionKey?: string;\n  /**\n   * @property The partition key for sending a message into an entity\n   * via a partitioned transfer queue. Maximum length is 128 characters. If a message is sent via a\n   * transfer queue in the scope of a transaction, this value selects the transfer queue partition:\n   * This is functionally equivalent to `partitionKey` property and ensures that messages are kept\n   * together and in order as they are transferred.\n   * See {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-transactions#transfers-and-send-via Transfers and Send Via}.\n   */\n  // Will be required later for implementing Transactions\n  // viaPartitionKey?: string;\n  /**\n   * @property The session identifier for a session-aware entity. Maximum\n   * length is 128 characters. For session-aware entities, this application-defined value specifies\n   * the session affiliation of the message. Messages with the same session identifier are subject\n   * to summary locking and enable exact in-order processing and demultiplexing. For\n   * session-unaware entities, this value is ignored.\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/message-sessions Message Sessions}.\n   */\n  sessionId?: string;\n  /**\n   * @property The session identifier augmenting the `replyTo` address.\n   * Maximum length is 128 characters. This value augments the ReplyTo information and specifies\n   * which SessionId should be set for the reply when sent to the reply entity.\n   * See {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation Message Routing and Correlation}.\n   */\n  replyToSessionId?: string;\n  /**\n   * @property The message’s time to live value. This value is the relative\n   * duration after which the message expires, starting from the instant the message has been\n   * accepted and stored by the broker, as captured in `enqueuedTimeUtc`. When not set explicitly,\n   * the assumed value is the DefaultTimeToLive for the respective queue or topic. A message-level\n   * `timeToLive` value cannot be longer than the entity's DefaultTimeToLive setting and it is\n   * silently adjusted if it does. See\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/message-expiration Expiration}.\n   */\n  timeToLive?: number;\n  /**\n   * @property The application specific label. This property enables the\n   * application to indicate the purpose of the message to the receiver in a standardized. fashion,\n   * similar to an email subject line. The mapped AMQP property is \"subject\".\n   */\n  subject?: string;\n  /**\n   * @property The \"to\" address. This property is reserved for future use in routing\n   * scenarios and presently ignored by the broker itself. Applications can use this value in\n   * rule-driven {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-auto-forwarding auto-forward chaining}\n   * scenarios to indicate the intended logical destination of the message.\n   */\n  to?: string;\n  /**\n   * @property The address of an entity to send replies to. This optional and\n   * application-defined value is a standard way to express a reply path to the receiver of the\n   * message. When a sender expects a reply, it sets the value to the absolute or relative path of\n   * the queue or topic it expects the reply to be sent to. See\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation Message Routing and Correlation}.\n   */\n  replyTo?: string;\n  /**\n   * @property The date and time in UTC at which the message will\n   * be enqueued. This property returns the time in UTC; when setting the property, the\n   * supplied DateTime value must also be in UTC. This value is for delayed message sending.\n   * It is utilized to delay messages sending to a specific time in the future. Message enqueuing\n   * time does not mean that the message will be sent at the same time. It will get enqueued,\n   * but the actual sending time depends on the queue's workload and its state.\n   */\n  scheduledEnqueueTimeUtc?: Date;\n  /**\n   * @property The lock token is a reference to the lock that is being held by the broker in\n   * `peekLock` receive mode. Locks are used internally settle messages as explained in the\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement product documentation in more detail}\n   * - Not applicable when the message is received in `receiveAndDelete` receive mode.\n   * mode.\n   * @readonly\n   */\n  readonly lockToken?: string;\n  /**\n   * @property Number of deliveries that have been attempted for this message. The count is\n   * incremented when a message lock expires, or the message is explicitly abandoned using the\n   * `abandon()` method on the message.\n   * @readonly\n   */\n  readonly deliveryCount?: number;\n  /**\n   * @property The UTC instant at which the message has been accepted and stored in Service Bus.\n   * @readonly\n   */\n  readonly enqueuedTimeUtc?: Date;\n  /**\n   * @property The UTC instant at which the message is marked for removal and no longer available for\n   * retrieval from the entity due to expiration. This property is computed from 2 other properties\n   * on the message: `enqueuedTimeUtc` + `timeToLive`.\n   */\n  readonly expiresAtUtc?: Date;\n  /**\n   * @property The UTC instant until which the message is held locked in the queue/subscription.\n   * When the lock expires, the `deliveryCount` is incremented and the message is again available\n   * for retrieval.\n   * - Not applicable when the message is received in `receiveAndDelete` receive mode.\n   * mode.\n   */\n  lockedUntilUtc?: Date;\n  /**\n   * @property The original sequence number of the message. For\n   * messages that have been auto-forwarded, this property reflects the sequence number that had\n   * first been assigned to the message at its original point of submission.\n   * @readonly\n   */\n  readonly enqueuedSequenceNumber?: number;\n  /**\n   * @property The unique number assigned to a message by Service Bus.\n   * The sequence number is a unique 64-bit integer assigned to a message as it is accepted\n   * and stored by the broker and functions as its true identifier. For partitioned entities,\n   * the topmost 16 bits reflect the partition identifier. Sequence numbers monotonically increase.\n   * They roll over to 0 when the 48-64 bit range is exhausted.\n   * @readonly\n   */\n  readonly sequenceNumber?: Long;\n  /**\n   * @property The name of the queue or subscription that this message\n   * was enqueued on, before it was deadlettered. Only set in messages that have been dead-lettered\n   * and subsequently auto-forwarded from the dead-letter sub-queue to another entity. Indicates the\n   * entity in which the message was dead-lettered.\n   * @readonly\n   */\n  readonly deadLetterSource?: string;\n  /**\n   * The associated delivery of the received message.\n   */\n  readonly delivery: Delivery;\n  /**\n   * @property {AmqpMessage} _rawAmqpMessage The underlying raw amqp annotated message.\n   * @readonly\n   */\n  readonly _rawAmqpMessage: AmqpAnnotatedMessage;\n  /**\n   * @property The reason for deadlettering the message.\n   * @readonly\n   */\n  readonly deadLetterReason?: string;\n  /**\n   * @property The error description for deadlettering the message.\n   * @readonly\n   */\n  readonly deadLetterErrorDescription?: string;\n  /**\n   * @internal\n   */\n  constructor(\n    msg: RheaMessage,\n    delivery: Delivery,\n    shouldReorderLockToken: boolean,\n    receiveMode: ReceiveMode\n  ) {\n    Object.assign(this, fromRheaMessage(msg, delivery, shouldReorderLockToken));\n    // Lock on a message is applicable only in peekLock mode, but the service sets\n    // the lock token even in receiveAndDelete mode if the entity in question is partitioned.\n    if (receiveMode === \"receiveAndDelete\") {\n      this.lockToken = undefined;\n    }\n    if (msg.body) {\n      this.body = defaultDataTransformer.decode(msg.body);\n    }\n    // TODO: _rawAmqpMessage is already being populated in fromRheaMessage(), no need to do it twice\n    this._rawAmqpMessage = AmqpAnnotatedMessage.fromRheaMessage(msg);\n    this.delivery = delivery;\n  }\n\n  /**\n   * Creates a clone of the current message to allow it to be re-sent to the queue\n   * @returns ServiceBusMessage\n   */\n  clone(): ServiceBusMessage {\n    // We are returning a ServiceBusMessage object because that object can then be sent to Service Bus\n    const clone: ServiceBusMessage = {\n      body: this.body,\n      contentType: this.contentType,\n      correlationId: this.correlationId,\n      subject: this.subject,\n      messageId: this.messageId,\n      partitionKey: this.partitionKey,\n      replyTo: this.replyTo,\n      replyToSessionId: this.replyToSessionId,\n      scheduledEnqueueTimeUtc: this.scheduledEnqueueTimeUtc,\n      sessionId: this.sessionId,\n      timeToLive: this.timeToLive,\n      to: this.to,\n      applicationProperties: this.applicationProperties\n      // Will be required later for implementing Transactions\n      // viaPartitionKey: this.viaPartitionKey\n    };\n\n    return clone;\n  }\n}\n"]}