{"version":3,"file":"sasServiceClientCredentials.js","sourceRoot":"","sources":["../../../src/util/sasServiceClientCredentials.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAMlC,OAAO,EAAE,mBAAmB,EAAE,MAAM,kCAAkC,CAAC;AACvE,OAAO,EAAE,WAAW,EAAyC,MAAM,kBAAkB,CAAC;AACtF,OAAO,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AAEvC;;;;;GAKG;AACH,MAAM,OAAO,2BAA2B;IAItC;;;;;;OAMG;IACH,YAAY,mBAA2B,EAAE,eAAuB;QAC9D,IAAI,CAAC,OAAO,GAAG,mBAAmB,CAAC;QACnC,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAC;QAChC,IAAI,CAAC,mBAAmB,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClF,CAAC;IAEa,kBAAkB,CAAC,SAAiB,EAAE,cAAsB;;YACxE,MAAM,YAAY,GAAG,GAAG,SAAS,KAAK,cAAc,EAAE,CAAC;YACvD,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAC9D,OAAO,MAAM,CAAC;QAChB,CAAC;KAAA;IAED;;;;;OAKG;IACG,WAAW,CAAC,WAAwB;;YACxC,IAAI,CAAC,WAAW,CAAC,OAAO;gBAAE,WAAW,CAAC,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;YAElE,MAAM,SAAS,GAAG,kBAAkB,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;YAElF,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;YACvC,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;YACzD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;YAC3E,WAAW,CAAC,OAAO,CAAC,GAAG,CACrB,eAAe,EACf,6BAA6B,SAAS,OAAO,cAAc,QAAQ,IAAI,CAAC,OAAO,OAAO,SAAS,EAAE,CAClG,CAAC;YACF,WAAW,CAAC,eAAe,GAAG,IAAI,CAAC;YACnC,OAAO,WAAW,CAAC;QACrB,CAAC;KAAA;IAED,QAAQ,CAAC,QAAgB;QACvB,OAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACrD,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AccessToken } from \"@azure/core-auth\";\nimport { SharedKeyCredential } from \"../servicebusSharedKeyCredential\";\nimport { HttpHeaders, ServiceClientCredentials, WebResource } from \"@azure/core-http\";\nimport { generateKey } from \"./crypto\";\n\n/**\n * @internal\n * @hidden\n * @class SasServiceClientCredentials\n * @implements {ServiceClientCredentials}\n */\nexport class SasServiceClientCredentials implements ServiceClientCredentials {\n  keyName: string;\n  keyValue: string;\n  private sharedKeyCredential: SharedKeyCredential;\n  /**\n   * Creates a new sasServiceClientCredentials object.\n   *\n   * @constructor\n   * @param {string} sharedAccessKeyName The SAS key name to use.\n   * @param {string} sharedAccessKey The SAS key value to use\n   */\n  constructor(sharedAccessKeyName: string, sharedAccessKey: string) {\n    this.keyName = sharedAccessKeyName;\n    this.keyValue = sharedAccessKey;\n    this.sharedKeyCredential = new SharedKeyCredential(this.keyName, this.keyValue);\n  }\n\n  private async _generateSignature(targetUri: string, expirationDate: number): Promise<string> {\n    const stringToSign = `${targetUri}\\n${expirationDate}`;\n    const result = await generateKey(this.keyValue, stringToSign);\n    return result;\n  }\n\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param {WebResource} webResource The WebResource to be signed.\n   * @returns {Promise<WebResource>} The signed request object.\n   */\n  async signRequest(webResource: WebResource): Promise<WebResource> {\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n\n    const targetUri = encodeURIComponent(webResource.url.toLowerCase()).toLowerCase();\n\n    const date = new Date();\n    date.setMinutes(date.getMinutes() + 5);\n    const expirationDate = Math.round(date.getTime() / 1000);\n    const signature = await this._generateSignature(targetUri, expirationDate);\n    webResource.headers.set(\n      \"authorization\",\n      `SharedAccessSignature sig=${signature}&se=${expirationDate}&skn=${this.keyName}&sr=${targetUri}`\n    );\n    webResource.withCredentials = true;\n    return webResource;\n  }\n\n  getToken(audience: string): AccessToken {\n    return this.sharedKeyCredential.getToken(audience);\n  }\n}\n"]}