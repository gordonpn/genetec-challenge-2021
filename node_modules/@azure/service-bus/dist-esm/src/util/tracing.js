// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { RestError } from "@azure/core-http";
import { getTracer } from "@azure/core-tracing";
import { CanonicalCode, SpanKind } from "@opentelemetry/api";
/**
 * @internal
 * @hidden
 * Creates a span using the global tracer.
 * @param name The name of the operation being performed.
 * @param operationOptions The options for the underlying http request.
 */
export function createSpan(operationName, operationOptions = {}) {
    var _a, _b, _c;
    const tracer = getTracer();
    const spanOptions = Object.assign(Object.assign({}, (_a = operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.spanOptions), { kind: SpanKind.INTERNAL });
    const span = tracer.startSpan(`Azure.ServiceBus.${operationName}`, spanOptions);
    span.setAttribute("az.namespace", "Microsoft.ServiceBus");
    let newSpanOptions = ((_b = operationOptions.tracingOptions) === null || _b === void 0 ? void 0 : _b.spanOptions) || {};
    if (span.isRecording()) {
        newSpanOptions = Object.assign(Object.assign({}, (_c = operationOptions.tracingOptions) === null || _c === void 0 ? void 0 : _c.spanOptions), { parent: span.context(), attributes: Object.assign(Object.assign({}, spanOptions.attributes), { "az.namespace": "Microsoft.ServiceBus" }) });
    }
    return {
        span,
        updatedOperationOptions: Object.assign(Object.assign({}, operationOptions), { tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), { spanOptions: newSpanOptions }) })
    };
}
/**
 * @internal
 * @hidden
 */
export function getCanonicalCode(err) {
    if (err instanceof RestError) {
        switch (err.statusCode) {
            case 401:
                return CanonicalCode.PERMISSION_DENIED;
            case 404:
                return CanonicalCode.NOT_FOUND;
            case 412:
                return CanonicalCode.FAILED_PRECONDITION;
        }
    }
    return CanonicalCode.UNKNOWN;
}
//# sourceMappingURL=tracing.js.map