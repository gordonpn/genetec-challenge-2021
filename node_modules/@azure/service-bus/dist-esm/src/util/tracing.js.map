{"version":3,"file":"tracing.js","sourceRoot":"","sources":["../../../src/util/tracing.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAoB,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC/D,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAE,aAAa,EAAQ,QAAQ,EAAgC,MAAM,oBAAoB,CAAC;AAEjG;;;;;;GAMG;AACH,MAAM,UAAU,UAAU,CACxB,aAAqB,EACrB,mBAAqC,EAAE;;IAEvC,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAC3B,MAAM,WAAW,yCACZ,gBAAgB,CAAC,cAAc,0CAAE,WAAW,KAC/C,IAAI,EAAE,QAAQ,CAAC,QAAQ,GACxB,CAAC;IAEF,MAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,oBAAoB,aAAa,EAAE,EAAE,WAAW,CAAC,CAAC;IAChF,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,sBAAsB,CAAC,CAAC;IAE1D,IAAI,cAAc,GAAG,OAAA,gBAAgB,CAAC,cAAc,0CAAE,WAAW,KAAI,EAAE,CAAC;IACxE,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;QACtB,cAAc,yCACT,gBAAgB,CAAC,cAAc,0CAAE,WAAW,KAC/C,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,EACtB,UAAU,kCACL,WAAW,CAAC,UAAU,KACzB,cAAc,EAAE,sBAAsB,MAEzC,CAAC;KACH;IAED,OAAO;QACL,IAAI;QACJ,uBAAuB,kCAClB,gBAAgB,KACnB,cAAc,kCAAO,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,cAAc,KAAE,WAAW,EAAE,cAAc,MACnF;KACF,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,gBAAgB,CAAC,GAAU;IACzC,IAAI,GAAG,YAAY,SAAS,EAAE;QAC5B,QAAQ,GAAG,CAAC,UAAU,EAAE;YACtB,KAAK,GAAG;gBACN,OAAO,aAAa,CAAC,iBAAiB,CAAC;YACzC,KAAK,GAAG;gBACN,OAAO,aAAa,CAAC,SAAS,CAAC;YACjC,KAAK,GAAG;gBACN,OAAO,aAAa,CAAC,mBAAmB,CAAC;SAC5C;KACF;IAED,OAAO,aAAa,CAAC,OAAO,CAAC;AAC/B,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions, RestError } from \"@azure/core-http\";\nimport { getTracer } from \"@azure/core-tracing\";\nimport { CanonicalCode, Span, SpanKind, SpanOptions as OTSpanOptions } from \"@opentelemetry/api\";\n\n/**\n * @internal\n * @hidden\n * Creates a span using the global tracer.\n * @param name The name of the operation being performed.\n * @param operationOptions The options for the underlying http request.\n */\nexport function createSpan(\n  operationName: string,\n  operationOptions: OperationOptions = {}\n): { span: Span; updatedOperationOptions: OperationOptions } {\n  const tracer = getTracer();\n  const spanOptions: OTSpanOptions = {\n    ...operationOptions.tracingOptions?.spanOptions,\n    kind: SpanKind.INTERNAL\n  };\n\n  const span = tracer.startSpan(`Azure.ServiceBus.${operationName}`, spanOptions);\n  span.setAttribute(\"az.namespace\", \"Microsoft.ServiceBus\");\n\n  let newSpanOptions = operationOptions.tracingOptions?.spanOptions || {};\n  if (span.isRecording()) {\n    newSpanOptions = {\n      ...operationOptions.tracingOptions?.spanOptions,\n      parent: span.context(),\n      attributes: {\n        ...spanOptions.attributes,\n        \"az.namespace\": \"Microsoft.ServiceBus\"\n      }\n    };\n  }\n\n  return {\n    span,\n    updatedOperationOptions: {\n      ...operationOptions,\n      tracingOptions: { ...operationOptions?.tracingOptions, spanOptions: newSpanOptions }\n    }\n  };\n}\n\n/**\n * @internal\n * @hidden\n */\nexport function getCanonicalCode(err: Error) {\n  if (err instanceof RestError) {\n    switch (err.statusCode) {\n      case 401:\n        return CanonicalCode.PERMISSION_DENIED;\n      case 404:\n        return CanonicalCode.NOT_FOUND;\n      case 412:\n        return CanonicalCode.FAILED_PRECONDITION;\n    }\n  }\n\n  return CanonicalCode.UNKNOWN;\n}\n"]}