// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * @internal
 * @hidden
 * @param {string} secret
 * @param {string} stringToSign
 * @returns {Promise<string>}
 */
export function generateKey(secret, stringToSign) {
    return __awaiter(this, void 0, void 0, function* () {
        const key = yield window.crypto.subtle.importKey("raw", convertToUint8Array(secret), {
            name: "HMAC",
            hash: { name: "SHA-256" }
        }, false, ["sign"]);
        const signature = yield window.crypto.subtle.sign("HMAC", key, convertToUint8Array(stringToSign));
        const base64encodedString = encodeByteArray(new Uint8Array(signature));
        const result = encodeURIComponent(base64encodedString);
        return result;
    });
}
/**
 * @internal
 * @hidden
 * @param {string} value
 */
function convertToUint8Array(value) {
    const arr = new Uint8Array(value.length);
    for (let i = 0; i < value.length; i++) {
        arr[i] = value.charCodeAt(i);
    }
    return arr;
}
/**
 * Encodes a byte array in base64 format.
 * @param value the Uint8Aray to encode
 * @internal
 * @hidden
 * @param {Uint8Array} value
 * @returns {string}
 */
function encodeByteArray(value) {
    let str = "";
    for (let i = 0; i < value.length; i++) {
        str += String.fromCharCode(value[i]);
    }
    return btoa(str);
}
//# sourceMappingURL=crypto.browser.js.map