{"version":3,"file":"receiver.js","sourceRoot":"","sources":["../../../src/receivers/receiver.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  PeekMessagesOptions,\n  GetMessageIteratorOptions,\n  MessageHandlers,\n  ReceiveMessagesOptions,\n  SubscribeOptions,\n  InternalMessageHandlers\n} from \"../models\";\nimport { OperationOptionsBase, trace } from \"../modelsToBeSharedWithEventHubs\";\nimport { ServiceBusReceivedMessage } from \"../serviceBusMessage\";\nimport { ConnectionContext } from \"../connectionContext\";\nimport {\n  getAlreadyReceivingErrorMsg,\n  getReceiverClosedErrorMsg,\n  InvalidMaxMessageCountError,\n  throwErrorIfConnectionClosed,\n  throwTypeErrorIfParameterMissing,\n  throwTypeErrorIfParameterNotLong,\n  throwErrorIfInvalidOperationOnMessage,\n  throwTypeErrorIfParameterTypeMismatch\n} from \"../util/errors\";\nimport { OnError, OnMessage, ReceiveOptions } from \"../core/messageReceiver\";\nimport { StreamingReceiverInitArgs, StreamingReceiver } from \"../core/streamingReceiver\";\nimport { BatchingReceiver } from \"../core/batchingReceiver\";\nimport {\n  abandonMessage,\n  assertValidMessageHandlers,\n  completeMessage,\n  deadLetterMessage,\n  deferMessage,\n  getMessageIterator,\n  wrapProcessErrorHandler\n} from \"./shared\";\nimport Long from \"long\";\nimport { ServiceBusMessageImpl, DeadLetterOptions } from \"../serviceBusMessage\";\nimport { Constants, RetryConfig, RetryOperationType, RetryOptions, retry } from \"@azure/core-amqp\";\nimport \"@azure/core-asynciterator-polyfill\";\nimport { LockRenewer } from \"../core/autoLockRenewer\";\nimport { createProcessingSpan } from \"../diagnostics/instrumentServiceBusMessage\";\nimport { receiverLogger as logger } from \"../log\";\nimport { translateServiceBusError } from \"../serviceBusError\";\n\n/**\n * A receiver that does not handle sessions.\n */\nexport interface ServiceBusReceiver {\n  /**\n   * Streams messages to message handlers.\n   * @param handlers A handler that gets called for messages and errors.\n   * @param options Options for subscribe.\n   * @returns An object that can be closed, sending any remaining messages to `handlers` and\n   * stopping new messages from arriving.\n   */\n  subscribe(\n    handlers: MessageHandlers,\n    options?: SubscribeOptions\n  ): {\n    /**\n     * Causes the subscriber to stop receiving new messages.\n     */\n    close(): Promise<void>;\n  };\n\n  /**\n   * Returns an iterator that can be used to receive messages from Service Bus.\n   * If the iterator is not able to fetch a new message in over a minute, `undefined` will be returned.\n   *\n   * @param options A set of options to control the receive operation.\n   * - `maxWaitTimeInMs`: The time to wait to receive the message in each iteration.\n   * - `abortSignal`: The signal to use to abort the ongoing operation.\n   *\n   * @throws Error if the underlying connection, client or receiver is closed.\n   * @throws Error if current receiver is already in state of receiving messages.\n   * @throws `ServiceBusError` if the service returns an error while receiving messages.\n   */\n  getMessageIterator(\n    options?: GetMessageIteratorOptions\n  ): AsyncIterableIterator<ServiceBusReceivedMessage>;\n\n  /**\n   * Returns a promise that resolves to an array of messages received from Service Bus.\n   *\n   * @param maxMessageCount The maximum number of messages to receive.\n   * @param options A set of options to control the receive operation.\n   * - `maxWaitTimeInMs`: The maximum time to wait for the first message before returning an empty array if no messages are available.\n   * - `abortSignal`: The signal to use to abort the ongoing operation.\n   * @returns Promise<ServiceBusReceivedMessage[]> A promise that resolves with an array of messages.\n   * @throws Error if the underlying connection, client or receiver is closed.\n   * @throws Error if current receiver is already in state of receiving messages.\n   * @throws `ServiceBusError` if the service returns an error while receiving messages.\n   */\n  receiveMessages(\n    maxMessageCount: number,\n    options?: ReceiveMessagesOptions\n  ): Promise<ServiceBusReceivedMessage[]>;\n\n  /**\n   * Returns a promise that resolves to an array of deferred messages identified by given `sequenceNumbers`.\n   * @param sequenceNumbers The sequence number or an array of sequence numbers for the messages that need to be received.\n   * @param options - Options bag to pass an abort signal or tracing options.\n   * @returns {Promise<ServiceBusMessage[]>}\n   * - Returns a list of messages identified by the given sequenceNumbers.\n   * - Returns an empty list if no messages are found.\n   * @throws Error if the underlying connection or receiver is closed.\n   * @throws `ServiceBusError` if the service returns an error while receiving deferred messages.\n   */\n  receiveDeferredMessages(\n    sequenceNumbers: Long | Long[],\n    options?: OperationOptionsBase\n  ): Promise<ServiceBusReceivedMessage[]>;\n\n  /**\n   * Peek the next batch of active messages (including deferred but not deadlettered messages) on the\n   * queue or subscription without modifying them.\n   * - The first call to `peekMessages()` fetches the first active message. Each subsequent call fetches the\n   * subsequent message.\n   * - Unlike a \"received\" message, \"peeked\" message is a read-only version of the message.\n   * It cannot be `Completed/Abandoned/Deferred/Deadlettered`.\n   * @param maxMessageCount The maximum number of messages to peek.\n   * @param options Options that allow to specify the maximum number of messages to peek,\n   * the sequenceNumber to start peeking from or an abortSignal to abort the operation.\n   */\n  peekMessages(\n    maxMessageCount: number,\n    options?: PeekMessagesOptions\n  ): Promise<ServiceBusReceivedMessage[]>;\n  /**\n   * Path of the entity for which the receiver has been created.\n   */\n  entityPath: string;\n  /**\n   * The receive mode used to create the receiver.\n   */\n  receiveMode: \"peekLock\" | \"receiveAndDelete\";\n  /**\n   * @property Returns `true` if either the receiver or the client that created it has been closed.\n   * @readonly\n   */\n  isClosed: boolean;\n  /**\n   * Closes the receiver.\n   * Once closed, the receiver cannot be used for any further operations.\n   * Use the `createReceiver()` method on the ServiceBusClient to create a new Receiver.\n   */\n  close(): Promise<void>;\n  /**\n   * Removes the message from Service Bus.\n   *\n   * @throws Error with name `SessionLockLostError` (for messages from a Queue/Subscription with sessions enabled)\n   * if the AMQP link with which the message was received is no longer alive. This can\n   * happen either because the lock on the session expired or the receiver was explicitly closed by\n   * the user or the AMQP link is closed by the library due to network loss or service error.\n   * @throws Error with name `MessageLockLostError` (for messages from a Queue/Subscription with sessions not enabled)\n   * if the lock on the message has expired or the AMQP link with which the message was received is\n   * no longer alive. The latter can happen if the receiver was explicitly closed by the user or the\n   * AMQP link got closed by the library due to network loss or service error.\n   * @throws Error if the message is already settled.\n   * property on the message if you are not sure whether the message is settled.\n   * @throws Error if used in `receiveAndDelete` mode because all messages received in this mode\n   * are pre-settled. To avoid this error, update your code to not settle a message which is received\n   * in this mode.\n   * @throws Error with name `ServiceUnavailableError` if Service Bus does not acknowledge the request to settle\n   * the message in time. The message may or may not have been settled successfully.\n   *\n   * @returns Promise<void>.\n   */\n  completeMessage(message: ServiceBusReceivedMessage): Promise<void>;\n  /**\n   * The lock held on the message by the receiver is let go, making the message available again in\n   * Service Bus for another receive operation.\n   *\n   * @throws `ServiceBusError` with the code `SessionLockLost` (for messages from a Queue/Subscription with sessions enabled)\n   * if the AMQP link with which the message was received is no longer alive. This can\n   * happen either because the lock on the session expired or the receiver was explicitly closed by\n   * the user or the AMQP link is closed by the library due to network loss or service error.\n   * @throws `ServiceBusError` with the code `MessageLockLost` (for messages from a Queue/Subscription with sessions not enabled)\n   * if the lock on the message has expired or the AMQP link with which the message was received is\n   * no longer alive. The latter can happen if the receiver was explicitly closed by the user or the\n   * AMQP link got closed by the library due to network loss or service error.\n   * @throws Error if the message is already settled.\n   * property on the message if you are not sure whether the message is settled.\n   * @throws Error if used in `receiveAndDelete` mode because all messages received in this mode\n   * are pre-settled. To avoid this error, update your code to not settle a message which is received\n   * in this mode.\n   * @throws `ServiceBusError` with the code `ServiceTimeout` if Service Bus does not acknowledge the request to settle\n   * the message in time. The message may or may not have been settled successfully.\n   *\n   * @param propertiesToModify The properties of the message to modify while abandoning the message.\n   *\n   * @return Promise<void>.\n   */\n  abandonMessage(\n    message: ServiceBusReceivedMessage,\n    propertiesToModify?: { [key: string]: any }\n  ): Promise<void>;\n  /**\n   * Defers the processing of the message. Save the `sequenceNumber` of the message, in order to\n   * receive it message again in the future using the `receiveDeferredMessage` method.\n   *\n   * @throws `ServiceBusError` with the code `SessionLockLost` (for messages from a Queue/Subscription with sessions enabled)\n   * if the AMQP link with which the message was received is no longer alive. This can\n   * happen either because the lock on the session expired or the receiver was explicitly closed by\n   * the user or the AMQP link is closed by the library due to network loss or service error.\n   * @throws `ServiceBusError` with the code `MessageLockLost` (for messages from a Queue/Subscription with sessions not enabled)\n   * if the lock on the message has expired or the AMQP link with which the message was received is\n   * no longer alive. The latter can happen if the receiver was explicitly closed by the user or the\n   * AMQP link got closed by the library due to network loss or service error.\n   * @throws Error if the message is already settled.\n   * property on the message if you are not sure whether the message is settled.\n   * @throws Error if used in `receiveAndDelete` mode because all messages received in this mode\n   * are pre-settled. To avoid this error, update your code to not settle a message which is received\n   * in this mode.\n   * @throws `ServiceBusError` with the code `ServiceTimeout` if Service Bus does not acknowledge the request to settle\n   * the message in time. The message may or may not have been settled successfully.\n   *\n   * @param propertiesToModify The properties of the message to modify while deferring the message\n   *\n   * @returns Promise<void>\n   */\n  deferMessage(\n    message: ServiceBusReceivedMessage,\n    propertiesToModify?: { [key: string]: any }\n  ): Promise<void>;\n  /**\n   * Moves the message to the deadletter sub-queue. To receive a deadletted message, create a new\n   * QueueClient/SubscriptionClient using the path for the deadletter sub-queue.\n   *\n   * @throws `ServiceBusError` with the code `SessionLockLost` (for messages from a Queue/Subscription with sessions enabled)\n   * if the AMQP link with which the message was received is no longer alive. This can\n   * happen either because the lock on the session expired or the receiver was explicitly closed by\n   * the user or the AMQP link is closed by the library due to network loss or service error.\n   * @throws `ServiceBusError` with the code `MessageLockLost` (for messages from a Queue/Subscription with sessions not enabled)\n   * if the lock on the message has expired or the AMQP link with which the message was received is\n   * no longer alive. The latter can happen if the receiver was explicitly closed by the user or the\n   * AMQP link got closed by the library due to network loss or service error.\n   * @throws Error if the message is already settled.\n   * property on the message if you are not sure whether the message is settled.\n   * @throws Error if used in `receiveAndDelete` mode because all messages received in this mode\n   * are pre-settled. To avoid this error, update your code to not settle a message which is received\n   * in this mode.\n   * @throws `ServiceBusError` with the code `ServiceTimeout` if Service Bus does not acknowledge the request to settle\n   * the message in time. The message may or may not have been settled successfully.\n   *\n   * @param options The DeadLetter options that can be provided while\n   * rejecting the message.\n   *\n   * @returns Promise<void>\n   */\n  deadLetterMessage(\n    message: ServiceBusReceivedMessage,\n    options?: DeadLetterOptions & { [key: string]: any }\n  ): Promise<void>;\n  /**\n   * Renews the lock on the message for the duration as specified during the Queue/Subscription\n   * creation.\n   * - Check the `lockedUntilUtc` property on the message for the time when the lock expires.\n   * - If a message is not settled (using either `complete()`, `defer()` or `deadletter()`,\n   * before its lock expires, then the message lands back in the Queue/Subscription for the next\n   * receive operation.\n   *\n   * @returns Promise<Date> - New lock token expiry date and time in UTC format.\n   * @throws Error if the underlying connection, client or receiver is closed.\n   * @throws ServiceBusError if the service returns an error while renewing message lock.\n   */\n  renewMessageLock(message: ServiceBusReceivedMessage): Promise<Date>;\n}\n\n/**\n * @internal\n * @hidden\n */\nexport class ServiceBusReceiverImpl implements ServiceBusReceiver {\n  private _retryOptions: RetryOptions;\n  /**\n   * @property {boolean} [_isClosed] Denotes if close() was called on this receiver\n   */\n  private _isClosed: boolean = false;\n\n  /**\n   * Instance of the BatchingReceiver class to use to receive messages in pull mode.\n   */\n  private _batchingReceiver?: BatchingReceiver;\n\n  /**\n   * Instance of the StreamingReceiver class to use to receive messages in push mode.\n   */\n  private _streamingReceiver?: StreamingReceiver;\n  private _lockRenewer: LockRenewer | undefined;\n\n  private _createProcessingSpan: typeof createProcessingSpan;\n\n  private get logPrefix() {\n    return `[${this._context.connectionId}|receiver:${this.entityPath}]`;\n  }\n\n  /**\n   * @throws Error if the underlying connection is closed.\n   */\n  constructor(\n    private _context: ConnectionContext,\n    public entityPath: string,\n    public receiveMode: \"peekLock\" | \"receiveAndDelete\",\n    maxAutoRenewLockDurationInMs: number,\n    retryOptions: RetryOptions = {}\n  ) {\n    throwErrorIfConnectionClosed(_context);\n    this._retryOptions = retryOptions;\n    this._lockRenewer = LockRenewer.create(\n      this._context,\n      maxAutoRenewLockDurationInMs,\n      receiveMode\n    );\n    this._createProcessingSpan = createProcessingSpan;\n  }\n\n  private _throwIfAlreadyReceiving(): void {\n    if (this._isReceivingMessages()) {\n      const errorMessage = getAlreadyReceivingErrorMsg(this.entityPath);\n      const error = new Error(errorMessage);\n      logger.logError(error, `${this.logPrefix} is already receiving`);\n      throw error;\n    }\n  }\n\n  private _throwIfReceiverOrConnectionClosed(): void {\n    throwErrorIfConnectionClosed(this._context);\n    if (this.isClosed) {\n      const errorMessage = getReceiverClosedErrorMsg(this.entityPath);\n      const error = new Error(errorMessage);\n      logger.logError(error, `${this.logPrefix} is closed`);\n      throw error;\n    }\n  }\n\n  public get isClosed(): boolean {\n    return this._isClosed || this._context.wasConnectionCloseCalled;\n  }\n\n  /**\n   * Registers handlers to deal with the incoming stream of messages over an AMQP receiver link\n   * from a Queue/Subscription.\n   * To stop receiving messages, call `close()` on the Receiver.\n   *\n   * Throws an error if there is another receive operation in progress on the same receiver. If you\n   * are not sure whether there is another receive operation running, check the `isReceivingMessages`\n   * property on the receiver.\n   *\n   * @param onMessage - Handler for processing each incoming message.\n   * @param onError - Handler for any error that occurs while receiving or processing messages.\n   * @param options - Options to control if messages should be automatically completed, and/or have\n   * their locks automatically renewed. You can control the maximum number of messages that should\n   * be concurrently processed. You can also provide a timeout in milliseconds to denote the\n   * amount of time to wait for a new message before closing the receiver.\n   *\n   * @returns void\n   * @throws Error if the underlying connection or receiver is closed.\n   * @throws Error if current receiver is already in state of receiving messages.\n   * @throws ServiceBusError if the service returns an error while receiving messages. These are bubbled up to be handled by user provided `onError` handler.\n   */\n  private _registerMessageHandler(\n    onInitialize: () => Promise<void>,\n    onMessage: OnMessage,\n    onError: OnError,\n    options: SubscribeOptions\n  ): void {\n    this._throwIfReceiverOrConnectionClosed();\n    this._throwIfAlreadyReceiving();\n    const connId = this._context.connectionId;\n    throwTypeErrorIfParameterMissing(connId, \"onMessage\", onMessage);\n    throwTypeErrorIfParameterMissing(connId, \"onError\", onError);\n    if (typeof onMessage !== \"function\") {\n      throw new TypeError(\"The parameter 'onMessage' must be of type 'function'.\");\n    }\n    if (typeof onError !== \"function\") {\n      throw new TypeError(\"The parameter 'onError' must be of type 'function'.\");\n    }\n\n    this._createStreamingReceiver({\n      ...options,\n      receiveMode: this.receiveMode,\n      retryOptions: this._retryOptions,\n      lockRenewer: this._lockRenewer,\n      onError\n    })\n      .then(async (sReceiver) => {\n        if (!sReceiver) {\n          return;\n        }\n        this._streamingReceiver = sReceiver;\n\n        try {\n          await onInitialize();\n        } catch (err) {\n          onError({\n            error: err,\n            errorSource: \"receive\",\n            entityPath: this.entityPath,\n            fullyQualifiedNamespace: this._context.config.host\n          });\n        }\n\n        if (!this.isClosed) {\n          sReceiver.subscribe(onMessage, onError);\n        } else {\n          await sReceiver.close();\n        }\n        return;\n      })\n      .catch((err) => {\n        // TODO: being a bit broad here but the only errors that should filter out this\n        // far are going to be bootstrapping the subscription.\n        onError({\n          error: err,\n          errorSource: \"receive\",\n          entityPath: this.entityPath,\n          fullyQualifiedNamespace: this._context.config.host\n        });\n      });\n  }\n\n  private async _createStreamingReceiver(\n    options: StreamingReceiverInitArgs\n  ): Promise<StreamingReceiver> {\n    throwErrorIfConnectionClosed(this._context);\n    if (options.autoCompleteMessages == null) options.autoCompleteMessages = true;\n\n    // When the user \"stops\" a streaming receiver (via the returned instance from 'subscribe' we just suspend\n    // it, leaving the link open). This allows users to stop the flow of messages but still be able to settle messages\n    // since the link itself hasn't been shut down.\n    //\n    // Users can, if they want, restart their subscription (since we've got a link already established).\n    // So you'll have an instance here if the user has done:\n    // 1. const subscription = receiver.subscribe()\n    // 2. subscription.stop()\n    // 3. receiver.subscribe()\n    this._streamingReceiver =\n      this._streamingReceiver ?? new StreamingReceiver(this._context, this.entityPath, options);\n\n    // this ensures that if the outer service bus client is closed that  this receiver is cleaned up.\n    // this mostly affects us if we're in the middle of init() - the connection (and receiver) are not yet\n    // open but we do need to close the receiver to exit the init() loop.\n    this._context.messageReceivers[this._streamingReceiver.name] = this._streamingReceiver;\n\n    await this._streamingReceiver.init({\n      connectionId: this._context.connectionId,\n      useNewName: false,\n      ...options\n    });\n\n    return this._streamingReceiver;\n  }\n\n  async receiveMessages(\n    maxMessageCount: number,\n    options?: ReceiveMessagesOptions\n  ): Promise<ServiceBusReceivedMessage[]> {\n    this._throwIfReceiverOrConnectionClosed();\n    this._throwIfAlreadyReceiving();\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"maxMessageCount\",\n      maxMessageCount\n    );\n    throwTypeErrorIfParameterTypeMismatch(\n      this._context.connectionId,\n      \"maxMessageCount\",\n      maxMessageCount,\n      \"number\"\n    );\n\n    if (isNaN(maxMessageCount) || maxMessageCount < 1) {\n      throw new TypeError(InvalidMaxMessageCountError);\n    }\n\n    const receiveMessages = async () => {\n      if (!this._batchingReceiver || !this._context.messageReceivers[this._batchingReceiver.name]) {\n        const options: ReceiveOptions = {\n          maxConcurrentCalls: 0,\n          receiveMode: this.receiveMode,\n          lockRenewer: this._lockRenewer\n        };\n        this._batchingReceiver = this._createBatchingReceiver(\n          this._context,\n          this.entityPath,\n          options\n        );\n      }\n\n      const receivedMessages = await this._batchingReceiver.receive(\n        maxMessageCount,\n        options?.maxWaitTimeInMs ?? Constants.defaultOperationTimeoutInMs,\n        defaultMaxTimeAfterFirstMessageForBatchingMs,\n        options ?? {}\n      );\n\n      return receivedMessages;\n    };\n    const config: RetryConfig<ServiceBusReceivedMessage[]> = {\n      connectionHost: this._context.config.host,\n      connectionId: this._context.connectionId,\n      operation: receiveMessages,\n      operationType: RetryOperationType.receiveMessage,\n      abortSignal: options?.abortSignal,\n      retryOptions: this._retryOptions\n    };\n    return retry<ServiceBusReceivedMessage[]>(config).catch((err) => {\n      throw translateServiceBusError(err);\n    });\n  }\n\n  getMessageIterator(\n    options?: GetMessageIteratorOptions\n  ): AsyncIterableIterator<ServiceBusReceivedMessage> {\n    return getMessageIterator(this, options);\n  }\n\n  async receiveDeferredMessages(\n    sequenceNumbers: Long | Long[],\n    options: OperationOptionsBase = {}\n  ): Promise<ServiceBusReceivedMessage[]> {\n    this._throwIfReceiverOrConnectionClosed();\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"sequenceNumbers\",\n      sequenceNumbers\n    );\n    throwTypeErrorIfParameterNotLong(\n      this._context.connectionId,\n      \"sequenceNumbers\",\n      sequenceNumbers\n    );\n\n    const deferredSequenceNumbers = Array.isArray(sequenceNumbers)\n      ? sequenceNumbers\n      : [sequenceNumbers];\n    const receiveDeferredMessagesOperationPromise = async () => {\n      const deferredMessages = await this._context\n        .getManagementClient(this.entityPath)\n        .receiveDeferredMessages(deferredSequenceNumbers, this.receiveMode, undefined, {\n          ...options,\n          associatedLinkName: this._getAssociatedReceiverName(),\n          requestName: \"receiveDeferredMessages\",\n          timeoutInMs: this._retryOptions.timeoutInMs\n        });\n      return deferredMessages;\n    };\n    const config: RetryConfig<ServiceBusReceivedMessage[]> = {\n      operation: receiveDeferredMessagesOperationPromise,\n      connectionId: this._context.connectionId,\n      operationType: RetryOperationType.management,\n      retryOptions: this._retryOptions,\n      abortSignal: options?.abortSignal\n    };\n    return retry<ServiceBusReceivedMessage[]>(config);\n  }\n\n  // ManagementClient methods # Begin\n\n  async peekMessages(\n    maxMessageCount: number,\n    options: PeekMessagesOptions = {}\n  ): Promise<ServiceBusReceivedMessage[]> {\n    this._throwIfReceiverOrConnectionClosed();\n\n    const managementRequestOptions = {\n      ...options,\n      associatedLinkName: this._getAssociatedReceiverName(),\n      requestName: \"peekMessages\",\n      timeoutInMs: this._retryOptions?.timeoutInMs\n    };\n    const peekOperationPromise = async () => {\n      if (options.fromSequenceNumber) {\n        return await this._context\n          .getManagementClient(this.entityPath)\n          .peekBySequenceNumber(\n            options.fromSequenceNumber,\n            maxMessageCount,\n            undefined,\n            managementRequestOptions\n          );\n      } else {\n        return await this._context\n          .getManagementClient(this.entityPath)\n          .peek(maxMessageCount, managementRequestOptions);\n      }\n    };\n\n    const config: RetryConfig<ServiceBusReceivedMessage[]> = {\n      operation: peekOperationPromise,\n      connectionId: this._context.connectionId,\n      operationType: RetryOperationType.management,\n      retryOptions: this._retryOptions,\n      abortSignal: options?.abortSignal\n    };\n    return retry<ServiceBusReceivedMessage[]>(config);\n  }\n\n  subscribe(\n    handlers: MessageHandlers,\n    options?: SubscribeOptions\n  ): {\n    close(): Promise<void>;\n  } {\n    assertValidMessageHandlers(handlers);\n    options = options ?? {};\n\n    const processError = wrapProcessErrorHandler(handlers);\n\n    const internalMessageHandlers = handlers as InternalMessageHandlers;\n\n    this._registerMessageHandler(\n      async () => {\n        if (internalMessageHandlers?.processInitialize) {\n          await internalMessageHandlers.processInitialize();\n        }\n      },\n      async (message: ServiceBusMessageImpl) => {\n        const span = this._createProcessingSpan(message, this, this._context.config, options);\n        return trace(() => handlers.processMessage(message), span);\n      },\n      processError,\n      options\n    );\n\n    return {\n      close: async (): Promise<void> => {\n        return this._streamingReceiver?.stopReceivingMessages();\n      }\n    };\n  }\n\n  async completeMessage(message: ServiceBusReceivedMessage): Promise<void> {\n    this._throwIfReceiverOrConnectionClosed();\n    throwErrorIfInvalidOperationOnMessage(message, this.receiveMode, this._context.connectionId);\n    const msgImpl = message as ServiceBusMessageImpl;\n    return completeMessage(msgImpl, this._context, this.entityPath);\n  }\n\n  async abandonMessage(\n    message: ServiceBusReceivedMessage,\n    propertiesToModify?: { [key: string]: any }\n  ): Promise<void> {\n    this._throwIfReceiverOrConnectionClosed();\n    throwErrorIfInvalidOperationOnMessage(message, this.receiveMode, this._context.connectionId);\n    const msgImpl = message as ServiceBusMessageImpl;\n    return abandonMessage(msgImpl, this._context, this.entityPath, propertiesToModify);\n  }\n\n  async deferMessage(\n    message: ServiceBusReceivedMessage,\n    propertiesToModify?: { [key: string]: any }\n  ): Promise<void> {\n    this._throwIfReceiverOrConnectionClosed();\n    throwErrorIfInvalidOperationOnMessage(message, this.receiveMode, this._context.connectionId);\n    const msgImpl = message as ServiceBusMessageImpl;\n    return deferMessage(msgImpl, this._context, this.entityPath, propertiesToModify);\n  }\n\n  async deadLetterMessage(\n    message: ServiceBusReceivedMessage,\n    options?: DeadLetterOptions & { [key: string]: any }\n  ): Promise<void> {\n    this._throwIfReceiverOrConnectionClosed();\n    throwErrorIfInvalidOperationOnMessage(message, this.receiveMode, this._context.connectionId);\n    const msgImpl = message as ServiceBusMessageImpl;\n    return deadLetterMessage(msgImpl, this._context, this.entityPath, options);\n  }\n\n  async renewMessageLock(message: ServiceBusReceivedMessage): Promise<Date> {\n    this._throwIfReceiverOrConnectionClosed();\n    throwErrorIfInvalidOperationOnMessage(message, this.receiveMode, this._context.connectionId);\n\n    const msgImpl = message as ServiceBusMessageImpl;\n\n    let associatedLinkName: string | undefined;\n    if (msgImpl.delivery.link) {\n      const associatedReceiver = this._context.getReceiverFromCache(msgImpl.delivery.link.name);\n      associatedLinkName = associatedReceiver?.name;\n    }\n    return this._context\n      .getManagementClient(this.entityPath)\n      .renewLock(message.lockToken!, { associatedLinkName })\n      .then((lockedUntil) => {\n        message.lockedUntilUtc = lockedUntil;\n        return lockedUntil;\n      });\n  }\n\n  async close(): Promise<void> {\n    try {\n      this._isClosed = true;\n      if (this._context.connection && this._context.connection.isOpen()) {\n        // Close the streaming receiver.\n        if (this._streamingReceiver) {\n          await this._streamingReceiver.close();\n        }\n\n        // Close the batching receiver.\n        if (this._batchingReceiver) {\n          await this._batchingReceiver.close();\n        }\n      }\n    } catch (err) {\n      logger.logError(err, `${this.logPrefix} An error occurred while closing the Receiver`);\n      throw err;\n    }\n  }\n\n  /**\n   * Indicates whether the receiver is currently receiving messages or not.\n   * When this returns true, new `registerMessageHandler()` or `receiveMessages()` calls cannot be made.\n   */\n  private _isReceivingMessages(): boolean {\n    if (\n      this._streamingReceiver &&\n      this._streamingReceiver.isOpen() &&\n      this._streamingReceiver.isReceivingMessages\n    ) {\n      return true;\n    }\n    if (\n      this._batchingReceiver &&\n      this._batchingReceiver.isOpen() &&\n      this._batchingReceiver.isReceivingMessages\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  private _createBatchingReceiver(\n    context: ConnectionContext,\n    entityPath: string,\n    options: ReceiveOptions\n  ): BatchingReceiver {\n    return BatchingReceiver.create(context, entityPath, options);\n  }\n\n  /**\n   * Helper function to retrieve any active receiver name, regardless of streaming or\n   * batching if it exists. This is used for optimization on the service side\n   */\n  private _getAssociatedReceiverName(): string | undefined {\n    if (this._streamingReceiver && this._streamingReceiver.isOpen()) {\n      return this._streamingReceiver.name;\n    }\n    if (\n      this._batchingReceiver &&\n      this._batchingReceiver.isOpen() &&\n      this._batchingReceiver.isReceivingMessages\n    ) {\n      return this._batchingReceiver.name;\n    }\n    return;\n  }\n}\n\n/**\n * The default time to wait for messages _after_ the first message\n * has been received.\n *\n * This timeout only applies to receiveMessages()\n *\n * @internal\n * @hidden\n */\nexport const defaultMaxTimeAfterFirstMessageForBatchingMs = 1000;\n"]}